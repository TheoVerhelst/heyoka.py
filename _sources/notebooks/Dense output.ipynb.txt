{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "0fc6751b",
   "metadata": {},
   "source": [
    "# Dense & continuous output\n",
    "\n",
    "One of the peculiar features of Taylor's method is that it directly provides,\n",
    "via Taylor series, *dense* (or *continuous*) output.\n",
    "That is, the Taylor series built by the integrator at each timestep can be used\n",
    "to compute the solution of the ODE system at *any time* within the timestep\n",
    "(and not only at the endpoint) via polynomial evaluation.\n",
    "\n",
    "Because the construction of the Taylor series is part of the timestepping algorithm,\n",
    "support for dense output comes at essentially no extra\n",
    "cost. Additionally, because the dense output is computed via the\n",
    "Taylor series of the solution of the ODE system, its accuracy\n",
    "is guaranteed to respect the error tolerance set in the integrator.\n",
    "\n",
    "Dense output can be used either from a low-level API, which gives direct access to\n",
    "the coefficients of the Taylor polynomials of the solution within a timestep,\n",
    "or from a higher-level API, which facilitates the common use case of using the coefficients\n",
    "of the Taylor polynomials to compute the continuous extension of the solution.\n",
    "If you are interested only in the latter, you can skip the next sections and jump\n",
    "directly to the continuous output section.\n",
    "\n",
    "In order to illustrate how to use dense output in heyoka.py,\n",
    "we will keep things simple and consider a simple harmonic oscillator:\n",
    "\n",
    "$$\n",
    "   \\begin{cases}\n",
    "   x^\\prime = v \\\\\n",
    "   v^\\prime = -x\n",
    "   \\end{cases},\n",
    "$$\n",
    "\n",
    "with initial conditions\n",
    "\n",
    "$$\n",
    "   \\begin{cases}\n",
    "   x\\left( 0 \\right) = 0 \\\\\n",
    "   v\\left( 0 \\right) = 1\n",
    "   \\end{cases}.\n",
    "$$\n",
    "\n",
    "The analytical solution for this simple ODE system is, of course,\n",
    "\n",
    "$$\n",
    "   \\begin{cases}\n",
    "   x\\left( t \\right) = \\sin\\left(t\\right) \\\\\n",
    "   v\\left( t \\right) = \\cos\\left(t\\right)\n",
    "   \\end{cases}.\n",
    "$$\n",
    "\n",
    "## Dense output for the ``step()`` methods\n",
    "\n",
    "Let's start by setting up the integrator:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "075fd172",
   "metadata": {},
   "outputs": [],
   "source": [
    "import heyoka as hy\n",
    "import numpy as np\n",
    "\n",
    "x, v = hy.make_vars(\"x\", \"v\")\n",
    "\n",
    "ta = hy.taylor_adaptive([(x, v),\n",
    "                         (v, -x)],\n",
    "                        state = [0, 1])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5aaf26b4",
   "metadata": {},
   "source": [
    "Enabling dense output in heyoka.py is a two-step process.\n",
    "\n",
    "The first step is to invoke one of the ``step()`` methods\n",
    "passing an extra boolean parameter set to ``True``:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ed5a015d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(<taylor_outcome.success: -4294967297>, 1.03425164317259)"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ta.step(write_tc = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1676418a",
   "metadata": {},
   "source": [
    "The extra ``write_tc = True`` argument instructs the integrator\n",
    "to record into an internal array the list of Taylor series\n",
    "coefficients that were generated by the timestepping algorithm.\n",
    "We can fetch the list of Taylor coefficients\n",
    "via the ``tc`` read-only property:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "300ac177",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.00000000e+00,  1.00000000e+00, -0.00000000e+00,\n",
       "        -1.66666667e-01,  0.00000000e+00,  8.33333333e-03,\n",
       "        -0.00000000e+00, -1.98412698e-04,  0.00000000e+00,\n",
       "         2.75573192e-06, -0.00000000e+00, -2.50521084e-08,\n",
       "         0.00000000e+00,  1.60590438e-10, -0.00000000e+00,\n",
       "        -7.64716373e-13,  0.00000000e+00,  2.81145725e-15,\n",
       "        -0.00000000e+00, -8.22063525e-18,  0.00000000e+00],\n",
       "       [ 1.00000000e+00, -0.00000000e+00, -5.00000000e-01,\n",
       "         0.00000000e+00,  4.16666667e-02, -0.00000000e+00,\n",
       "        -1.38888889e-03,  0.00000000e+00,  2.48015873e-05,\n",
       "        -0.00000000e+00, -2.75573192e-07,  0.00000000e+00,\n",
       "         2.08767570e-09, -0.00000000e+00, -1.14707456e-11,\n",
       "         0.00000000e+00,  4.77947733e-14, -0.00000000e+00,\n",
       "        -1.56192070e-16,  0.00000000e+00,  4.11031762e-19]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ta.tc"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f5d899b",
   "metadata": {},
   "source": [
    "The Taylor coefficients are stored in a 2D array, where each row refers to a different state variable and the number of columns is the Taylor order of the integrator plus one. Thus, the zero-order coefficients for the $x$ and $v$ variables are, respectively:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "71841158",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0., 1.])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ta.tc[:, 0]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e1f4e187",
   "metadata": {},
   "source": [
    "Indeed, the zero-order Taylor coefficients for the state variables are nothing but\n",
    "the initial conditions at the beginning of the timestep that was just taken.\n",
    "\n",
    "> **NOTE:** This last point is important and needs to be stressed again: the Taylor\n",
    "> coefficients always refer to the **last** step taken and **not** to the next\n",
    "> step that the integrator might take."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e526ea35",
   "metadata": {},
   "source": [
    "We are now ready to ask the integrator to compute the value of the solution at some\n",
    "arbitrary time. Let's pick $t = 0.5$,\n",
    "which is about halfway through the timestep that was just taken:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "86ced14d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.47942554, 0.87758256])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ta.update_d_output(t = 0.5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "58bff24f",
   "metadata": {},
   "source": [
    "The ``update_d_output()`` method takes in input an *absolute* time coordinate\n",
    "and returns a reference to an internal array that will contain the state of the system\n",
    "at the specified time coordinate, as computed by the evaluation of the Taylor series.\n",
    "``update_d_output()`` can also be called with a time coordinate relative to the current time\n",
    "by passing ``rel_time = True`` as an additional function argument.\n",
    "\n",
    "The dense output array can be accessed directly via the ``d_output`` property:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "4f87b0e7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.47942554, 0.87758256])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ta.d_output"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fda73301",
   "metadata": {},
   "source": [
    "Let's now compare the dense output for the $x$ variable to the exact analytical solution for $t \\in \\left[ 0, 1 \\right]$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "948a6f53",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib.pylab import plt\n",
    "plt.rcParams[\"figure.figsize\"] = (12,6)\n",
    "\n",
    "# Construct a time grid from t=0 to t=1.\n",
    "t_grid = np.linspace(0, 1, 100)\n",
    "\n",
    "# Compute the dense output for the x variable\n",
    "# over the time grid.\n",
    "x_d_out = np.array([ta.update_d_output(t)[0] for t in t_grid])\n",
    "\n",
    "# Compare it to the exact solution.\n",
    "plt.plot(t_grid, (x_d_out - np.sin(t_grid)))\n",
    "plt.xlabel(\"Time\")\n",
    "plt.ylabel(\"Absolute error\");"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19120ed5",
   "metadata": {},
   "source": [
    "As you can see, the dense output matches the exact solution to machine precision.\n",
    "\n",
    "Let's now ask for the dense output at the very end of the timestep that was just taken (i.e., at the current time coordinate), and let's compare it to the current state vector:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "04fda936",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0., 0.])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ta.update_d_output(ta.time) - ta.state"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ccc39a58",
   "metadata": {},
   "source": [
    "That is, as expected, the dense output at the end of the previous timestep\n",
    "matches the current state of the system to machine precision.\n",
    "\n",
    "Before concluding, we need to highlight a couple of caveats regarding the\n",
    "use of dense output.\n",
    "\n",
    "> **NOTE**: first, it is the user's responsibility to ensure that the array of Taylor\n",
    "> coefficients contains up-to-date values. In other words, the user needs to remember\n",
    "> to invoke the ``step()`` methods with the extra boolean argument ``write_tc = True``\n",
    "> before invoking ``update_d_output()``.\n",
    "> Failure to do so will result in ``update_d_output()`` producing incorrect values.\n",
    "\n",
    "> **NOTE**: second, the accuracy of dense output is guaranteed to match the integrator's\n",
    "> accuracy only if the time coordinate falls within the last step taken. Note that heyoka.py will\n",
    "> **not** prevent the invocation of ``update_d_output()`` with time coordinates outside the\n",
    "> guaranteed accuracy range - it is the user's responsibility to be aware\n",
    "> that doing so will produce results whose accuracy does not match the integrator's\n",
    "> error tolerance.\n",
    "\n",
    "The second point can be better appreciated if we try to compute the dense output past the end of the last timestep taken:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "373234c7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Construct a time grid from t=1 to t=3.\n",
    "t_grid = np.linspace(1, 3, 100)\n",
    "\n",
    "# Compute the dense output for the x variable\n",
    "# over the time grid.\n",
    "x_d_out = np.array([ta.update_d_output(t)[0] for t in t_grid])\n",
    "\n",
    "# Compare it to the exact solution.\n",
    "plt.semilogy(t_grid, abs((x_d_out - np.sin(t_grid)) / np.sin(t_grid)))\n",
    "plt.xlabel(\"Time\")\n",
    "plt.ylabel(\"Relative error\");"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c47015f",
   "metadata": {},
   "source": [
    "As you can see, past $t \\sim 1$ the dense output is still accurate for another $\\sim 0.5$ time units, but eventually the error with respect to the exact solution begins to increase steadily."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3fdc856-a40c-48a6-845a-1c2ea2e08a28",
   "metadata": {},
   "source": [
    "## Dense output for the ``propagate_*()`` methods\n",
    "\n",
    "Dense output can be enabled also for the time-limited propagation methods\n",
    "``propagate_for()`` and ``propagate_until()`` via the boolean keyword argument\n",
    "``write_tc``.\n",
    "\n",
    "When ``write_tc`` is set to ``True``, the ``propagate_*()`` methods\n",
    "will internally invoke the ``step()`` methods with the optional boolean\n",
    "flag ``write_tc`` set to ``True``, so that at the end of each timestep the Taylor coefficients\n",
    "will be available. The Taylor coefficients can be used, e.g., inside the\n",
    "optional callback that can be passed to the ``propagate_*()`` methods.\n",
    "\n",
    "Note that ``propagate_grid()`` always unconditionally writes the Taylor coefficients\n",
    "at the end of each timestep, and thus using the ``write_tc`` argument is not necessary.\n",
    "\n",
    "## Continuous output\n",
    "\n",
    "Starting with heyoka.py 0.16,\n",
    "the ``propagate_for()`` and ``propagate_until()`` methods can optionally return a function object\n",
    "providing continuous output in the integration interval. That is, this function object can be used\n",
    "to compute the solution at any time within the time interval covered by ``propagate_for/until()``.\n",
    "\n",
    "Continuous output is activated by passing the ``c_output = True`` keyword option to the ``propagate_for/until()`` methods.\n",
    "Let us see an example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3f9e30d4-6d00-4a26-bd12-49b3bde7c572",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Reset the integrator state.\n",
    "ta.state[:] = [0, 1]\n",
    "ta.time = 0\n",
    "\n",
    "# Propagate and return the continuous output.\n",
    "c_out = ta.propagate_until(10., c_output=True)[4]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f3416bcc-59fb-4aeb-b27e-dbbb3bb25534",
   "metadata": {},
   "source": [
    "The continuous output function object is the fifth element of the tuple returned by ``propagate_for/until()`` (note that if ``c_output`` is set to ``False`` - the default - then the fifth element of the tuple is ``None``).\n",
    "\n",
    "Let us print ``c_out`` to screen:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "876106e8-df1b-4730-a7c3-bad2420e8b3c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Direction : forward\n",
       "Time range: [0, 10)\n",
       "N of steps: 10"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c_out"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c3d2c49e-cdf1-4503-825f-2b7a749c1557",
   "metadata": {},
   "source": [
    "The screen output informs us that the ``c_out`` object is capable of providing continuous output in\n",
    "the $\\left[0, 10\\right)$ time interval, and that 10 steps were taken during the integration.\n",
    "\n",
    "The call operator of the ``c_out`` object accepts in input either\n",
    "\n",
    "* a single absolute time coordinate, or\n",
    "* a 1D vector of absolute time coordinates.\n",
    "\n",
    "In the first case, the return value will be a 1D NumPy array containing the state vector at the desired time. In the second case, the return value will be a 2D NumPy array in which each row contains the state vector at the corresponding input time.\n",
    "\n",
    "Let us see a couple of examples:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "53fe90c0-22bb-45e2-9310-672ee4ef6f1c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "State vector at t=5: [-0.95892427  0.28366219]\n",
      "\n",
      "State vectors at t=[1,2,3,4,5]:\n",
      "[[ 0.84147098  0.54030231]\n",
      " [ 0.90929743 -0.41614684]\n",
      " [ 0.14112001 -0.9899925 ]\n",
      " [-0.7568025  -0.65364362]\n",
      " [-0.95892427  0.28366219]]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Print the state vector at t = 5.\n",
    "print(\"State vector at t=5: {}\\n\".format(c_out(5.)))\n",
    "\n",
    "# Print the state vectors at a few different times.\n",
    "print(\"State vectors at t=[1,2,3,4,5]:\\n{}\\n\".format(c_out([1,2,3,4,5])))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5327bb85-c33f-4c66-9312-29e2fb6b08e2",
   "metadata": {},
   "source": [
    "Let us test the precision of the continuous output over a fine time grid in the $\\left[0, 10\\right]$ time interval:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "529a2e50-bf7d-4369-b167-fd7d35c02462",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Construct a time grid from t=0 to t=10.\n",
    "t_grid = np.linspace(0, 10, 1000)\n",
    "\n",
    "# Compute the continuous output for the x variable\n",
    "# over the time grid.\n",
    "x_c_out = c_out(t_grid)\n",
    "\n",
    "# Compare it to the exact solution.\n",
    "plt.semilogy(t_grid, abs(x_c_out[:,0] - np.sin(t_grid)))\n",
    "plt.xlabel(\"Time\")\n",
    "plt.ylabel(\"Absolute error\");"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f542616-d8b5-4474-8611-35c04b6f7203",
   "metadata": {},
   "source": [
    "As we can see, the continuous output agrees with the analytical solution to machine precision.\n",
    "\n",
    "Continuous output is somewhat similar to ``propagate_grid()``, in the sense that both allow to compute the value of the solution at arbitrary time points. ``propagate_grid()`` is computationally more efficient, but it requires to specify up-front the list of times at which the solution should be computed. Continuous output, on the other hand, is not bound to a predetermined time grid, and it can thus be helpful if time coordinates of interest can be identified only after the solution has been computed.\n",
    "\n",
    "Before concluding, we need to highlight a couple of caveats regarding the\n",
    "use of continuous output.\n",
    "\n",
    "> **NOTE**: the ``continuous_output`` function object stores internally the time\n",
    "> coordinate and Taylor coefficients at the end of each step taken during the integration interval.\n",
    "> This means that the memory usage of a ``continuous_output`` object scales linearly\n",
    "> with the number of timesteps taken during the integration interval. Thus, for a sufficiently\n",
    "> long integration interval, the ``continuous_output`` object might end up exhausting the available memory.\n",
    "\n",
    "> **NOTE**: like for dense output, the accuracy of ``continuous_output`` is guaranteed to\n",
    "> match the integrator’s accuracy only if the time coordinate falls within the integration interval.\n",
    "> Note that heyoka.py will not prevent the use of a ``continuous_output`` object outside the\n",
    "> guaranteed accuracy range - it is the user’s responsibility to be aware that doing so will\n",
    "> produce results whose accuracy does not match the integrator’s error tolerance.\n",
    "\n",
    "Note that, like the other main classes in heyoka.py, ``continuous_output`` supports [serialisation](<./pickling.ipynb>)."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
