{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "0fc6751b",
   "metadata": {},
   "source": [
    "# Dense & continuous output\n",
    "\n",
    "One of the peculiar features of Taylor's method is that it directly provides,\n",
    "via Taylor series, *dense* (or *continuous*) output.\n",
    "That is, the Taylor series built by the integrator at each timestep can be used\n",
    "to compute the solution of the ODE system at *any time* within the timestep\n",
    "(and not only at the endpoint) via polynomial evaluation.\n",
    "\n",
    "Because the construction of the Taylor series is part of the timestepping algorithm,\n",
    "support for dense output comes at essentially no extra\n",
    "cost. Additionally, because the dense output is computed via the\n",
    "Taylor series of the solution of the ODE system, its accuracy\n",
    "is guaranteed to respect the error tolerance set in the integrator.\n",
    "\n",
    "Dense output can be used either from a low-level API, which gives direct access to\n",
    "the coefficients of the Taylor polynomials of the solution within a timestep,\n",
    "or from a higher-level API, which facilitates the common use case of using the coefficients\n",
    "of the Taylor polynomials to compute the continuous extension of the solution.\n",
    "If you are interested only in the latter, you can skip the next sections and jump\n",
    "directly to the continuous output section.\n",
    "\n",
    "In order to illustrate how to use dense output in heyoka.py,\n",
    "we will keep things simple and consider a simple harmonic oscillator:\n",
    "\n",
    "$$\n",
    "   \\begin{cases}\n",
    "   x^\\prime = v \\\\\n",
    "   v^\\prime = -x\n",
    "   \\end{cases},\n",
    "$$\n",
    "\n",
    "with initial conditions\n",
    "\n",
    "$$\n",
    "   \\begin{cases}\n",
    "   x\\left( 0 \\right) = 0 \\\\\n",
    "   v\\left( 0 \\right) = 1\n",
    "   \\end{cases}.\n",
    "$$\n",
    "\n",
    "The analytical solution for this simple ODE system is, of course,\n",
    "\n",
    "$$\n",
    "   \\begin{cases}\n",
    "   x\\left( t \\right) = \\sin\\left(t\\right) \\\\\n",
    "   v\\left( t \\right) = \\cos\\left(t\\right)\n",
    "   \\end{cases}.\n",
    "$$\n",
    "\n",
    "## Dense output for the ``step()`` methods\n",
    "\n",
    "Let's start by setting up the integrator:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "075fd172",
   "metadata": {},
   "outputs": [],
   "source": [
    "import heyoka as hy\n",
    "import numpy as np\n",
    "\n",
    "x, v = hy.make_vars(\"x\", \"v\")\n",
    "\n",
    "ta = hy.taylor_adaptive([(x, v),\n",
    "                         (v, -x)],\n",
    "                        state = [0., 1.])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5aaf26b4",
   "metadata": {},
   "source": [
    "Enabling dense output in heyoka.py is a two-step process.\n",
    "\n",
    "The first step is to invoke one of the ``step()`` methods\n",
    "passing an extra boolean parameter set to ``True``:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ed5a015d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(<taylor_outcome.success: -4294967297>, 1.03425164317259)"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ta.step(write_tc = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1676418a",
   "metadata": {},
   "source": [
    "The extra ``write_tc = True`` argument instructs the integrator\n",
    "to record into an internal array the list of Taylor series\n",
    "coefficients that were generated by the timestepping algorithm.\n",
    "We can fetch the list of Taylor coefficients\n",
    "via the ``tc`` read-only property:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "300ac177",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.00000000e+00,  1.00000000e+00, -0.00000000e+00,\n",
       "        -1.66666667e-01,  0.00000000e+00,  8.33333333e-03,\n",
       "        -0.00000000e+00, -1.98412698e-04,  0.00000000e+00,\n",
       "         2.75573192e-06, -0.00000000e+00, -2.50521084e-08,\n",
       "         0.00000000e+00,  1.60590438e-10, -0.00000000e+00,\n",
       "        -7.64716373e-13,  0.00000000e+00,  2.81145725e-15,\n",
       "        -0.00000000e+00, -8.22063525e-18,  0.00000000e+00],\n",
       "       [ 1.00000000e+00, -0.00000000e+00, -5.00000000e-01,\n",
       "         0.00000000e+00,  4.16666667e-02, -0.00000000e+00,\n",
       "        -1.38888889e-03,  0.00000000e+00,  2.48015873e-05,\n",
       "        -0.00000000e+00, -2.75573192e-07,  0.00000000e+00,\n",
       "         2.08767570e-09, -0.00000000e+00, -1.14707456e-11,\n",
       "         0.00000000e+00,  4.77947733e-14, -0.00000000e+00,\n",
       "        -1.56192070e-16,  0.00000000e+00,  4.11031762e-19]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ta.tc"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f5d899b",
   "metadata": {},
   "source": [
    "The Taylor coefficients are stored in a 2D array, where each row refers to a different state variable and the number of columns is the Taylor order of the integrator plus one. Thus, the zero-order coefficients for the $x$ and $v$ variables are, respectively:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "71841158",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0., 1.])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ta.tc[:, 0]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e1f4e187",
   "metadata": {},
   "source": [
    "Indeed, the zero-order Taylor coefficients for the state variables are nothing but\n",
    "the initial conditions at the beginning of the timestep that was just taken.\n",
    "\n",
    "> **NOTE:** This last point is important and needs to be stressed again: the Taylor\n",
    "> coefficients always refer to the **last** step taken and **not** to the next\n",
    "> step that the integrator might take."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e526ea35",
   "metadata": {},
   "source": [
    "We are now ready to ask the integrator to compute the value of the solution at some\n",
    "arbitrary time. Let's pick $t = 0.5$,\n",
    "which is about halfway through the timestep that was just taken:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "86ced14d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.47942554, 0.87758256])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ta.update_d_output(t = 0.5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "58bff24f",
   "metadata": {},
   "source": [
    "The ``update_d_output()`` method takes in input an *absolute* time coordinate\n",
    "and returns a reference to an internal array that will contain the state of the system\n",
    "at the specified time coordinate, as computed by the evaluation of the Taylor series.\n",
    "``update_d_output()`` can also be called with a time coordinate relative to the current time\n",
    "by passing ``rel_time = True`` as an additional function argument.\n",
    "\n",
    "The dense output array can be accessed directly via the ``d_output`` property:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "4f87b0e7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.47942554, 0.87758256])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ta.d_output"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fda73301",
   "metadata": {},
   "source": [
    "Let's now compare the dense output for the $x$ variable to the exact analytical solution for $t \\in \\left[ 0, 1 \\right]$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "948a6f53",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib.pylab import plt\n",
    "plt.rcParams[\"figure.figsize\"] = (12,6)\n",
    "\n",
    "# Construct a time grid from t=0 to t=1.\n",
    "t_grid = np.linspace(0, 1, 100)\n",
    "\n",
    "# Compute the dense output for the x variable\n",
    "# over the time grid.\n",
    "x_d_out = np.array([ta.update_d_output(t)[0] for t in t_grid])\n",
    "\n",
    "# Compare it to the exact solution.\n",
    "plt.plot(t_grid, (x_d_out - np.sin(t_grid)))\n",
    "plt.xlabel(\"Time\")\n",
    "plt.ylabel(\"Absolute error\");"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19120ed5",
   "metadata": {},
   "source": [
    "As you can see, the dense output matches the exact solution to machine precision.\n",
    "\n",
    "Let's now ask for the dense output at the very end of the timestep that was just taken (i.e., at the current time coordinate), and let's compare it to the current state vector:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "04fda936",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0., 0.])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ta.update_d_output(ta.time) - ta.state"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ccc39a58",
   "metadata": {},
   "source": [
    "That is, as expected, the dense output at the end of the previous timestep\n",
    "matches the current state of the system to machine precision.\n",
    "\n",
    "Before concluding, we need to highlight a couple of caveats regarding the\n",
    "use of dense output.\n",
    "\n",
    "> **NOTE**: first, it is the user's responsibility to ensure that the array of Taylor\n",
    "> coefficients contains up-to-date values. In other words, the user needs to remember\n",
    "> to invoke the ``step()`` methods with the extra boolean argument ``write_tc = True``\n",
    "> before invoking ``update_d_output()``.\n",
    "> Failure to do so will result in ``update_d_output()`` producing incorrect values.\n",
    "\n",
    "> **NOTE**: second, the accuracy of dense output is guaranteed to match the integrator's\n",
    "> accuracy only if the time coordinate falls within the last step taken. Note that heyoka.py will\n",
    "> **not** prevent the invocation of ``update_d_output()`` with time coordinates outside the\n",
    "> guaranteed accuracy range - it is the user's responsibility to be aware\n",
    "> that doing so will produce results whose accuracy does not match the integrator's\n",
    "> error tolerance.\n",
    "\n",
    "The second point can be better appreciated if we try to compute the dense output past the end of the last timestep taken:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "373234c7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Construct a time grid from t=1 to t=3.\n",
    "t_grid = np.linspace(1, 3, 100)\n",
    "\n",
    "# Compute the dense output for the x variable\n",
    "# over the time grid.\n",
    "x_d_out = np.array([ta.update_d_output(t)[0] for t in t_grid])\n",
    "\n",
    "# Compare it to the exact solution.\n",
    "plt.semilogy(t_grid, abs((x_d_out - np.sin(t_grid)) / np.sin(t_grid)))\n",
    "plt.xlabel(\"Time\")\n",
    "plt.ylabel(\"Relative error\");"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c47015f",
   "metadata": {},
   "source": [
    "As you can see, past $t \\sim 1$ the dense output is still accurate for another $\\sim 0.5$ time units, but eventually the error with respect to the exact solution begins to increase steadily."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3fdc856-a40c-48a6-845a-1c2ea2e08a28",
   "metadata": {},
   "source": [
    "## Dense output for the ``propagate_*()`` methods\n",
    "\n",
    "Dense output can be enabled also for the time-limited propagation methods\n",
    "``propagate_for()`` and ``propagate_until()`` via the boolean keyword argument\n",
    "``write_tc``.\n",
    "\n",
    "When ``write_tc`` is set to ``True``, the ``propagate_*()`` methods\n",
    "will internally invoke the ``step()`` methods with the optional boolean\n",
    "flag ``write_tc`` set to ``True``, so that at the end of each timestep the Taylor coefficients\n",
    "will be available. The Taylor coefficients can be used, e.g., inside the\n",
    "optional callback that can be passed to the ``propagate_*()`` methods.\n",
    "\n",
    "Note that ``propagate_grid()`` always unconditionally writes the Taylor coefficients\n",
    "at the end of each timestep, and thus using the ``write_tc`` argument is not necessary.\n",
    "\n",
    "## Continuous output\n",
    "\n",
    "Starting with heyoka.py 0.16,\n",
    "the ``propagate_for()`` and ``propagate_until()`` methods can optionally return a function object\n",
    "providing continuous output in the integration interval. That is, this function object can be used\n",
    "to compute the solution at any time within the time interval covered by ``propagate_for/until()``.\n",
    "\n",
    "Continuous output is activated by passing the ``c_output = True`` keyword option to the ``propagate_for/until()`` methods.\n",
    "Let us see an example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3f9e30d4-6d00-4a26-bd12-49b3bde7c572",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Reset the integrator state.\n",
    "ta.state[:] = [0, 1]\n",
    "ta.time = 0\n",
    "\n",
    "# Propagate and return the continuous output.\n",
    "c_out = ta.propagate_until(10., c_output=True)[4]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f3416bcc-59fb-4aeb-b27e-dbbb3bb25534",
   "metadata": {},
   "source": [
    "The continuous output function object is the fifth element of the tuple returned by ``propagate_for/until()`` (note that if ``c_output`` is set to ``False`` - the default - then the fifth element of the tuple is ``None``).\n",
    "\n",
    "Let us print ``c_out`` to screen:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "876106e8-df1b-4730-a7c3-bad2420e8b3c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Direction : forward\n",
       "Time range: [0, 10)\n",
       "N of steps: 10"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c_out"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c3d2c49e-cdf1-4503-825f-2b7a749c1557",
   "metadata": {},
   "source": [
    "The screen output informs us that the ``c_out`` object is capable of providing continuous output in\n",
    "the $\\left[0, 10\\right)$ time interval, and that 10 steps were taken during the integration.\n",
    "\n",
    "The call operator of the ``c_out`` object accepts in input either\n",
    "\n",
    "* a single absolute time coordinate, or\n",
    "* a 1D vector of absolute time coordinates.\n",
    "\n",
    "In the first case, the return value will be a 1D NumPy array containing the state vector at the desired time. In the second case, the return value will be a 2D NumPy array in which each row contains the state vector at the corresponding input time.\n",
    "\n",
    "Let us see a couple of examples:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "53fe90c0-22bb-45e2-9310-672ee4ef6f1c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "State vector at t=5: [-0.95892427  0.28366219]\n",
      "\n",
      "State vectors at t=[1,2,3,4,5]:\n",
      "[[ 0.84147098  0.54030231]\n",
      " [ 0.90929743 -0.41614684]\n",
      " [ 0.14112001 -0.9899925 ]\n",
      " [-0.7568025  -0.65364362]\n",
      " [-0.95892427  0.28366219]]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Print the state vector at t = 5.\n",
    "print(\"State vector at t=5: {}\\n\".format(c_out(5.)))\n",
    "\n",
    "# Print the state vectors at a few different times.\n",
    "print(\"State vectors at t=[1,2,3,4,5]:\\n{}\\n\".format(c_out([1,2,3,4,5])))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5327bb85-c33f-4c66-9312-29e2fb6b08e2",
   "metadata": {},
   "source": [
    "Let us test the precision of the continuous output over a fine time grid in the $\\left[0, 10\\right]$ time interval:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "529a2e50-bf7d-4369-b167-fd7d35c02462",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Construct a time grid from t=0 to t=10.\n",
    "t_grid = np.linspace(0, 10, 1000)\n",
    "\n",
    "# Compute the continuous output for the x variable\n",
    "# over the time grid.\n",
    "x_c_out = c_out(t_grid)\n",
    "\n",
    "# Compare it to the exact solution.\n",
    "plt.semilogy(t_grid, abs(x_c_out[:,0] - np.sin(t_grid)))\n",
    "plt.xlabel(\"Time\")\n",
    "plt.ylabel(\"Absolute error\");"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f542616-d8b5-4474-8611-35c04b6f7203",
   "metadata": {},
   "source": [
    "As we can see, the continuous output agrees with the analytical solution to machine precision.\n",
    "\n",
    "Continuous output is somewhat similar to ``propagate_grid()``, in the sense that both allow to compute the value of the solution at arbitrary time points. ``propagate_grid()`` is computationally more efficient, but it requires to specify up-front the list of times at which the solution should be computed. Continuous output, on the other hand, is not bound to a predetermined time grid, and it can thus be helpful if time coordinates of interest can be identified only after the solution has been computed.\n",
    "\n",
    "Before concluding, we need to highlight a couple of caveats regarding the\n",
    "use of continuous output.\n",
    "\n",
    "> **NOTE**: the ``continuous_output`` function object stores internally the time\n",
    "> coordinate and Taylor coefficients at the end of each step taken during the integration interval.\n",
    "> This means that the memory usage of a ``continuous_output`` object scales linearly\n",
    "> with the number of timesteps taken during the integration interval. Thus, for a sufficiently\n",
    "> long integration interval, the ``continuous_output`` object might end up exhausting the available memory.\n",
    "\n",
    "> **NOTE**: like for dense output, the accuracy of ``continuous_output`` is guaranteed to\n",
    "> match the integrator’s accuracy only if the time coordinate falls within the integration interval.\n",
    "> Note that heyoka.py will not prevent the use of a ``continuous_output`` object outside the\n",
    "> guaranteed accuracy range - it is the user’s responsibility to be aware that doing so will\n",
    "> produce results whose accuracy does not match the integrator’s error tolerance.\n",
    "\n",
    "Note that, like the other main classes in heyoka.py, ``continuous_output`` supports [serialisation](<./pickling.ipynb>)."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
