{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "unable-biodiversity",
   "metadata": {},
   "source": [
    "The expression system\n",
    "===================\n",
    "\n",
    "As we saw in the previous section, heyoka\n",
    "needs to be able to represent the right-hand side of an ODE system in symbolic\n",
    "form in order to be able to compute its high-order derivatives via automatic\n",
    "differentiation. heyoka represents generic mathematical expressions\n",
    "via a simple [abstract syntax tree (AST)](https://en.wikipedia.org/wiki/Abstract_syntax_tree)\n",
    "in which the internal nodes are either mathematical operators or n-ary functions,\n",
    "and the leaf nodes can be:\n",
    "\n",
    "- symbolic variables,\n",
    "- numerical constants,\n",
    "- runtime parameters.\n",
    "\n",
    "Constants and parameters are mathematically equivalent, the only difference being\n",
    "that the value of a constant is determined when the expression is created, whereas\n",
    "the value of a parameter is loaded from a user-supplied data array at a later stage.\n",
    "\n",
    "As a simple example, here is a graphical representation of the\n",
    "AST for the expression $\\left( 1 - x^2\\right)y-x$:\n",
    "\n",
    "<img src=\"../_static/ast.png\" width=\"350\">\n",
    "\n",
    "The construction of the AST of an expression in heyoka can be accomplished via natural\n",
    "mathematical notation:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "copyrighted-petersburg",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The euclidean distance is sqrt((((x * x) + (y * y)) + (z * z)))\n"
     ]
    }
   ],
   "source": [
    "import heyoka as hy\n",
    "\n",
    "# Define the symbolic variables x and y.\n",
    "x, y = hy.make_vars(\"x\", \"y\")\n",
    "\n",
    "# Another way of creating a symbolic variable.\n",
    "z = hy.expression(\"z\")\n",
    "\n",
    "# Create and print an expression.\n",
    "print(\"The euclidean distance is {}\".format(hy.sqrt(x*x + y*y + z*z)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "young-minimum",
   "metadata": {},
   "source": [
    "Numerical constants can be created using any of the floating-point types supported by heyoka:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "statewide-embassy",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Double-precision 1.1: 1.1000000000000001\n",
      "Extended-precision 1.1: 1.10000000000000000002\n",
      "Quadruple-precision 1.1: 1.10000000000000000000000000000000008\n"
     ]
    }
   ],
   "source": [
    "print(\"Double-precision 1.1: {}\".format(hy.expression(1.1)))\n",
    "\n",
    "import numpy as np\n",
    "print(\"Extended-precision 1.1: {}\".format(hy.expression(np.longdouble(\"1.1\"))))\n",
    "\n",
    "from mpmath import mpf, mp\n",
    "mp.prec = 113\n",
    "\n",
    "print(\"Quadruple-precision 1.1: {}\".format(hy.expression(mpf(\"1.1\"))))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "perfect-conference",
   "metadata": {},
   "source": [
    "Note that support for extended-precision floating-point types varies depending on the software/hardware platform. Specifically:\n",
    "\n",
    "- extended-precision support requires an x86 processor and a compiler toolchain that makes available the 80-bit floating-point type as the C++ ``long double`` type;\n",
    "- quadruple-precision support requires the availability of the non-standard ``__float128`` type, which is provided by GCC and clang on some 64-bit platforms. Additionally, [mpmath](https://mpmath.org/) must be installed and the working precision must be set exactly to 113 bits (as shown above).\n",
    "\n",
    "In addition to the standard mathematical operators, heyoka's expression system\n",
    "also supports the following elementary functions (with more to come in the near future):\n",
    "\n",
    "* square root,\n",
    "* exponentiation,\n",
    "* the basic trigonometric and hyperbolic functions, and their inverse counterparts,\n",
    "* the natural logarithm and exponential,\n",
    "* the standard logistic function (sigmoid),\n",
    "* the error function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "accredited-mechanics",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((cos((x + (2.0000000000000000 * y))) * sqrt(z)) - exp(x))"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# An expression involving a few elementary functions.\n",
    "hy.cos(x + 2. * y) * hy.sqrt(z) - hy.exp(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "driving-problem",
   "metadata": {},
   "source": [
    "It must be emphasised that heyoka's expression system is not a full-fledged\n",
    "computer algebra system. In particular, its simplification capabilities\n",
    "are very limited. Because heyoka's performance is sensitive\n",
    "to the complexity of the ODEs, in order to achieve optimal performance\n",
    "it is important to ensure that\n",
    "the mathematical expressions supplied to heyoka are simplified as\n",
    "much as possible."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
