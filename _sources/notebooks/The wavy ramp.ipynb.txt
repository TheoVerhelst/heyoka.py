{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "eac3271e",
   "metadata": {},
   "source": [
    "# The wavy ramp\n",
    "\n",
    "In this example, we will integrate the dynamics of a point mass bouncing down a non-linear ramp. The point mass behaves like a rubber ball, meaning that at every bounce it will dissipate part of its kinetic energy due to the [inelastic](https://en.wikipedia.org/wiki/Inelastic_collision) character of the collisions.\n",
    "\n",
    "Let us begin, as usual, with the definition of the dynamics:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "553b9d9f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import heyoka as hy\n",
    "\n",
    "x, y, vx, vy = hy.make_vars(\"x\", \"y\", \"vx\", \"vy\")\n",
    "\n",
    "eqns = [(x, vx),\n",
    "        (y, vy),\n",
    "        (vx, hy.expression(0.)),\n",
    "        # Downwards constant acceleration.\n",
    "        (vy, hy.expression(-9.8))]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cbe82079",
   "metadata": {},
   "source": [
    "In other words, we are setting up a 2D dynamical system in which the only acceleration is due to the (constant) gravitational field.\n",
    "\n",
    "The contour of the ramp is defined by the non-linear equation\n",
    "\n",
    "$$\n",
    "y = 1 - x + 0.05 \\cos\\left(11 \\pi x \\right).\n",
    "$$\n",
    "\n",
    "Let us take a look:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7faf59f9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib.pylab import plt\n",
    "import numpy as np\n",
    "plt.rcParams[\"figure.figsize\"] = (9,6)\n",
    "\n",
    "fig = plt.figure()\n",
    "x_grid = np.linspace(0, 1., 1000)\n",
    "plt.plot(x_grid, (1 - x_grid + 0.05 * np.cos(11 * np.pi * x_grid)), 'k-', linewidth=1)\n",
    "plt.fill_between(x_grid, -1., (1 - x_grid + 0.05 * np.cos(11 * np.pi * x_grid)), color='gray')\n",
    "plt.ylim(0, None);"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a02d74cf",
   "metadata": {},
   "source": [
    "We want the particle to bounce off both the wavy ramp and the ground (i.e., $x$ axis). Thus, we will have to define two different event equations and two different callback functions to implement the bouncing behaviour. Let us begin with the event equations:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "04c9f0e8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Event equation for the ramp.\n",
    "eq_w_curve = y - (1. - x + 0.05 * hy.cos(11 * np.pi * x))\n",
    "\n",
    "# Event equation for the ground.\n",
    "eq_bottom = y"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4479fba2",
   "metadata": {},
   "source": [
    "Next, we need to implement the callbacks. Because we are dealing with inelastic collisions, when the particle hits a surface it will lose part of its kinetic energy. The [coefficient of restitution](https://en.wikipedia.org/wiki/Coefficient_of_restitution) $C_R \\in \\left[0, 1\\right]$ regulates how much energy is lost at every bounce.\n",
    "\n",
    "Additionally, because of the loss of energy, the particle will experience increasingly frequent collisions if it gets stuck in one of the local minima of the curve or when it starts bouncing off the ground. In practice, we want to stop the simulation once the collisions become too frequent.\n",
    "\n",
    "Let us see the code:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c6a7ab81",
   "metadata": {},
   "outputs": [],
   "source": [
    "# The coefficient of restitution.\n",
    "CR = .8\n",
    "\n",
    "# Global variables to track\n",
    "# the time of the last collision\n",
    "# and the collision points.\n",
    "last_t = 0.\n",
    "bounce_points = []\n",
    "\n",
    "# Callback for bouncing against the curve.\n",
    "def cb_w_curve(ta, mr, d_sgn):\n",
    "    global last_t\n",
    "\n",
    "    # If the last collision happened\n",
    "    # too recently, return False to\n",
    "    # stop the simulation.\n",
    "    if ta.time - last_t < 1e-6:\n",
    "        return False\n",
    "\n",
    "    # Update last_t.\n",
    "    last_t = ta.time\n",
    "\n",
    "    # Update bounce_points.\n",
    "    x, y = ta.state[0:2]\n",
    "    bounce_points.append((x, y))\n",
    "    \n",
    "    # Compute the normal unit vector\n",
    "    # using the gradient of the event\n",
    "    # equation.\n",
    "    grad = np.array([1+0.05*11*np.pi*np.sin(11*np.pi*x), 1])\n",
    "    grad_uvec = grad / np.linalg.norm(grad)\n",
    "    \n",
    "    # Compute the component of the velocity\n",
    "    # across the normal vector.\n",
    "    xy_vel = ta.state[2:4]\n",
    "    vproj = np.dot(xy_vel, grad_uvec)\n",
    "    \n",
    "    # Flip it and rescale it according\n",
    "    # to the coefficient of restitution.\n",
    "    Dv = -vproj*grad_uvec\n",
    "    xy_vel += (1. + CR) * Dv\n",
    "\n",
    "    return True\n",
    "\n",
    "# Callback for bouncing off the ground.\n",
    "def cb_bottom(ta, mr, d_sgn):\n",
    "    global last_t\n",
    "    \n",
    "    # If the last collision happened\n",
    "    # too recently, return False to\n",
    "    # stop the simulation.\n",
    "    if ta.time - last_t < 1e-6:\n",
    "        return False\n",
    "\n",
    "    # Update last_t.\n",
    "    last_t = ta.time\n",
    "\n",
    "    # Update bounce_points.\n",
    "    x, y = ta.state[0:2]\n",
    "    bounce_points.append((x, y))\n",
    "    \n",
    "    # Flip the y component of the velocity,\n",
    "    # and rescale it according\n",
    "    # to the coefficient of restitution.\n",
    "    ta.state[3] = -CR*ta.state[3]\n",
    "    \n",
    "    return True"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba77fb48",
   "metadata": {},
   "source": [
    "We are now ready to create the integrator object. As initial conditions, we will put the particle at rest above the ramp on the $y$ axis:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "285b4776",
   "metadata": {},
   "outputs": [],
   "source": [
    "ta = hy.taylor_adaptive(eqns, [0., 1.2, 0., 0.], t_events = [hy.t_event(eq_w_curve, callback = cb_w_curve, direction = hy.event_direction.negative),\n",
    "                                                             hy.t_event(eq_bottom, callback = cb_bottom, direction = hy.event_direction.negative)])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e7b95f4e",
   "metadata": {},
   "source": [
    "Note how, as explained in the [Keplerian billiard](<./The Keplerian billiard.ipynb>) example, we assigned specific directions to the collision events. This is done in order to avoid triggering spurious double-bounce events that would lead to the particle penetrating through the ramp or the ground.\n",
    "\n",
    "We can now integrate the system for a few time units:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a1fab993",
   "metadata": {},
   "outputs": [],
   "source": [
    "t_grid = np.linspace(0, 10, 10000)\n",
    "oc, _, _, _, res = ta.propagate_grid(t_grid)\n",
    "\n",
    "# Transform bounce_points in a NumPy array\n",
    "# for ease of use.\n",
    "b_points = np.array(bounce_points)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c503814",
   "metadata": {},
   "source": [
    "Let us take a look at the trajectory:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "cff0eff9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x648 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.rcParams[\"figure.figsize\"] = (12,9)\n",
    "fig = plt.figure()\n",
    "plt.plot(res[:,0],res[:,1])\n",
    "x_grid = np.linspace(0, 1., 1000)\n",
    "plt.plot(x_grid, (1 - x_grid + 0.05 * np.cos(11 * np.pi * x_grid)), 'k-', linewidth=1)\n",
    "plt.plot(b_points[:, 0], b_points[:, 1], 'o')\n",
    "plt.fill_between(x_grid, -1., (1 - x_grid + 0.05 * np.cos(11 * np.pi * x_grid)), color='gray')\n",
    "plt.ylim(0, None);"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d39bab91",
   "metadata": {},
   "source": [
    "We can clearly see the dissipative behaviour of the inelastic collisions at play. Indeed, despite the fact that we asked to integrate the system up to $t=10$, the integration was stopped at"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f75d9d74",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4.7390191265468795"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ta.time"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a619f29",
   "metadata": {},
   "source": [
    "instead, and the outcome ``oc`` informs us that the integration was stopped because of a stopping terminal event:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "935109c2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<taylor_outcome.???: -2>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "oc"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "09145c42",
   "metadata": {},
   "source": [
    "A value of ``oc`` negative and greater than ``taylor_outcome.success`` indicates a stopping terminal event. The index of the stopping terminal event is ``-oc - 1``:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ba9dc815",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Stopped by terminal event? True\n",
      "Index of the terminal event: 1\n"
     ]
    }
   ],
   "source": [
    "print(\"Stopped by terminal event? {}\".format(oc > hy.taylor_outcome.success and int(oc) < 0))\n",
    "print(\"Index of the terminal event: {}\".format(-int(oc)-1))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
