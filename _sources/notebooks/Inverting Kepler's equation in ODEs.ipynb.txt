{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e6e99643-fa2f-40c5-b748-19ae6baae4f1",
   "metadata": {},
   "source": [
    "# Inverting Kepler's equation in ODEs\n",
    "\n",
    "In the [previous tutorial](<./Comparing coordinate systems.ipynb>) we considered the numerical solution of the Stark problem, whose Hamiltonian, in Cartesian coordinates, reads\n",
    "\n",
    "$$\n",
    "\\mathcal{H}_\\mathrm{cart}\\left(v_x, v_y, v_z, x, y, z \\right) = \\frac{1}{2}\\left( v_x^2+v_y^2+v_z^2 \\right) - \\frac{1}{\\sqrt{x^2+y^2+z^2}} - \\varepsilon z.\n",
    "$$\n",
    "\n",
    "We saw how a reformulation of the Stark problem using Delaunay elements, instead of Cartesian coordinates, can help reducing the total number of timesteps per unit of integration time. The Delaunay elements are the Hamiltonian version of the [Keplerian orbital elements](https://en.wikipedia.org/wiki/Orbital_elements), to which they are related via the following equations (valid in adimensional units):\n",
    "\n",
    "$$\n",
    "\\begin{aligned}\n",
    "L & = \\sqrt{a}, & l & =  M, \\\\\n",
    "G & = \\sqrt{a\\left( 1 - e^2\\right)}, & g & = \\omega, \\\\\n",
    "H & = \\sqrt{a\\left( 1 - e^2\\right)} \\cos i, & h & =  \\Omega.\n",
    "\\end{aligned}\n",
    "$$\n",
    "\n",
    "The Hamiltonian of the Stark problem in Delaunay elements reads:\n",
    "\n",
    "$$\n",
    "\\mathcal{H}_\\mathrm{Del} \\left( L, G, H, l, g, h \\right) = -\\frac{1}{2L^2}-\\varepsilon L\\sqrt{1-\\frac{H^2}{G^2}}\\left[ L\\left( \\cos E - \\sqrt{1-\\frac{G^2}{L^2}} \\right)\\sin g + G\\sin E \\cos g \\right].\n",
    "$$\n",
    "\n",
    "In this Hamiltonian, $E$ is the eccentric anomaly, which is a function of $L$, $G$ and $l$ implicitly defined by [Kepler's equation](https://en.wikipedia.org/wiki/Kepler%27s_equation):\n",
    "\n",
    "$$\n",
    "l = E - \\sqrt{1-\\frac{G^2}{L^2}} \\sin E.\n",
    "$$\n",
    "\n",
    "Because Kepler's equation is trascendental, it cannot be inverted to yield an explicit expression for $E$ in terms of elementary functions. In the [previous tutorial](<./Comparing coordinate systems.ipynb>) we worked around this issue by leaving $E$ as an unspecified function in the Hamiltonian; we then augmented Hamilton's equations via the derivatives of $E$ (which can be formulated explicitly) and numerically solved the augmented system of differential equations.\n",
    "\n",
    "Here we will employ a different approach, and we will use instead the function ``kepE()`` provided by heyoka.py's expression system. As the name suggests, ``kepE()`` represents symbolically the inversion of Kepler's elliptic equation. That is, ``kepE(e, M)`` is the binvariate function $E\\left(e,M\\right)$ implicitly defined by Kepler's elliptic equation:\n",
    "\n",
    "$$\n",
    "M = E - e \\sin E.\n",
    "$$\n",
    "\n",
    "For the evaluation of ``kepE(e, M)`` heyoka.py uses an iterative numerical scheme. The high-order derivatives necessary to implement Taylor's integration method are built using automatic-differentiation techniques starting from the evaluation of ``kepE(e, M)``.\n",
    "\n",
    "Let us begin by writing down the Hamiltonian:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c82ace35-08ea-4c28-b04c-81b468c5193b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import heyoka as hy\n",
    "\n",
    "# Numerical value for the eps constant.\n",
    "eps = 1e-3\n",
    "\n",
    "# Symbolic variables for the Delaunay arguments.\n",
    "L, G, H, l, g, h = hy.make_vars(\"L\", \"G\", \"H\", \"l\", \"g\", \"h\")\n",
    "\n",
    "# Define E as the solution to Kepler's equation.\n",
    "E = hy.kepE(hy.sqrt(1-G**2*L**-2), l)\n",
    "\n",
    "# The Hamiltonian.\n",
    "Ham_del = -0.5*L**-2 - eps*L*hy.sqrt(1.-H**2*G**-2)*(L*(hy.cos(E)-hy.sqrt(1.-G**2*L**-2))*hy.sin(g)+G*hy.sin(E)*hy.cos(g))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a6a91824-ca5b-4140-8485-2434733ad532",
   "metadata": {},
   "source": [
    "Note how, in terms of Delaunay arguments, $e=\\sqrt{1-\\frac{G^2}{L^2}}$ and $M=l$.\n",
    "\n",
    "Unlike in the [previous tutorial](<./Comparing coordinate systems.ipynb>), and thanks to the fact that ``kepE()`` supports symbolic differentiation, we can now use the standard formulation of Hamilton's equations:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a1b17f85-4efc-4ec0-8b20-fb1aa8a3bddb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define the system of ODEs.\n",
    "sys = [(L, -hy.diff(Ham_del, l)),\n",
    "       (G, -hy.diff(Ham_del, g)),\n",
    "       (H, -hy.diff(Ham_del, h)),\n",
    "       (l, hy.diff(Ham_del, L)),\n",
    "       (g, hy.diff(Ham_del, G)),\n",
    "       (h, hy.diff(Ham_del, H))]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "72fe3a74-e035-440c-b420-3646aabb4516",
   "metadata": {},
   "source": [
    "We can now proceed to the creation of the integrator object. The initial conditions are taken from the [previous tutorial](<./Comparing coordinate systems.ipynb>):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "56aedf2a-767a-4333-a202-778a99c8430f",
   "metadata": {},
   "outputs": [],
   "source": [
    "ta = hy.taylor_adaptive(sys,\n",
    "                        [1.0045488165591647, 0.9731906288081488, -0.9683287292736491,\n",
    "                         2.776991035843252, 4.314274521695855, 3.3415926535897924])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5cfa5b10-aec7-41d6-bb2f-4a31ac51c6a3",
   "metadata": {},
   "source": [
    "Let us now integrate up to $t=250$ on a time grid. As usual, we will provide a callback to periodically reduce the $l$ angle modulo $2\\pi$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b0c52e16-f32c-49d4-9bb3-0cd07e7ae1af",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "# Callback to reduce l to the\n",
    "# [-pi, pi] range.\n",
    "def mod_cb_del(ta):\n",
    "    \n",
    "    l = ta.state[3]\n",
    "    if l < -np.pi or l > np.pi:\n",
    "        ta.state[3] = (l + np.pi) % (2 * np.pi) - np.pi\n",
    "\n",
    "# Define a time grid for the integration.\n",
    "t_grid = np.linspace(0, 250, 1000)\n",
    "\n",
    "# Integrate.\n",
    "_, _, _, _, out_del = ta.propagate_grid(t_grid, callback = mod_cb_del)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "26208487-5c97-4412-9f6a-9efad835a9c2",
   "metadata": {},
   "source": [
    "Let us take a look at the time evolution of the Delaunay elements:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "77b9c512-ad7d-43ab-b11b-9a15b00d6d28",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "from matplotlib.pylab import plt\n",
    "\n",
    "def plot_t_evol(out, labels):\n",
    "    fig = plt.figure(figsize = (12, 6))\n",
    "    \n",
    "    max_abs = 8\n",
    "    \n",
    "    ncoord = out.shape[1]\n",
    "    ncols = 3\n",
    "    nrows = ncoord // ncols + (ncoord % ncols)\n",
    "\n",
    "    for i in range(0, ncoord):\n",
    "        ax = fig.add_subplot(nrows, ncols, i + 1)\n",
    "        ax.plot(t_grid, out[:, i])\n",
    "        ax.set_xlabel(\"Time\")\n",
    "        ax.set_ylabel(labels[i])\n",
    "        ax.set_ylim(-max_abs, max_abs)\n",
    "    \n",
    "    plt.tight_layout()\n",
    "\n",
    "plot_t_evol(out_del, [\"$L$\", \"$G$\", \"$H$\", \"$l$\", \"$g$\", \"$h$\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f5585c7-2429-4f26-9cc8-8e8269e254d5",
   "metadata": {},
   "source": [
    "It can be confirmed by direct numerical comparison that the integration of the Stark problem using ``kepE()`` produced results matching those from the [previous tutorial](<./Comparing coordinate systems.ipynb>) to machine precision."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
