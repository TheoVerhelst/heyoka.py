{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "ed177532-5b0b-4fe5-a697-b1c3b8058501",
   "metadata": {},
   "source": [
    "# Calculating transit timing variations\n",
    "\n",
    "In this example we will be using heyoka.py's [event detection](<./Event detection.ipynb>) system to find the transit times in a two-planet system. This example is directly inspired by a [notebook](https://rebound.readthedocs.io/en/latest/ipython_examples/TransitTimingVariations.html) in the documentation of the [REBOUND](https://rebound.readthedocs.io) software package.\n",
    "\n",
    "We begin as usual with importing heyoka.py and a couple of extra useful modules:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "fcd9fcfa-4a18-4083-815b-87e188c900b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pykep as pk\n",
    "import heyoka as hy\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d739c1a-2434-4038-93ff-d6bcaeed69f6",
   "metadata": {},
   "source": [
    "Next, we define the initial conditions for the two planets in the system. The inner planet is on a low-eccentricity orbit, while the outer planet is on a circular orbit. Both orbits have zero inclination, so that the motion is constrained to the $xy$ plane. We use adimensional units ($G=1$), the mass of the central star is $1$ and both planets have a mass of $10^{-5}$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d3cb090b-76b3-46fa-917c-8b6b971b698a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Initial cartesian conditions for the two planets.\n",
    "# We use pykep to convert from Keplerian elements.\n",
    "r1, v1 = pk.par2ic([1., 0.1, 0., 0., 0.25, 0.])\n",
    "r2, v2 = pk.par2ic([1.757, 0., 0., 0., 0., 0.])\n",
    "\n",
    "# Masses of the 3 bodies in the system.\n",
    "masses = np.array([1, 1e-5, 1e-5])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b3f0b64-2a0e-4eac-abfb-ec977fcc1ff8",
   "metadata": {},
   "source": [
    "We can now proceed to the definition of the system of differential equations via the ``make_nbody_sys()`` helper:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0d29f42b-f6c8-424f-89a9-31bc703e9c75",
   "metadata": {},
   "outputs": [],
   "source": [
    "sys = hy.make_nbody_sys(3, masses = masses)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "638e6bbd-93bf-499d-8d9d-378356ab9fa6",
   "metadata": {},
   "source": [
    "The next step is the definition of the event for the detection of the planetary transit. In this setup, we assume that the observer of the system is in the direction of the positive $x$ axis, so that a planetary transit happens when the $y$ coordinate of the planet is zero. Thus, in order to detect the transit of the inner planet, we will use the trivial event equation\n",
    "\n",
    "$$\n",
    "y_1 = 0.\n",
    "$$\n",
    "\n",
    "Because $y_1$ is zero also when the planet transits *behind* the star, we will further constrain the event by imposing a *positive* direction for the event. That is, the event will trigger only if $y_1 = 0$ and the value of $y_1$ is switching from negative to positive. Alternatively (and more robustly), we could compute the value of $x_1$ when the event triggers via dense output and ignore the event if $x_1<0$, however for this simple example specifying the event direction will suffice.\n",
    "\n",
    "Finally, we will log the trigger time of each event in a global list for further analysis.\n",
    "\n",
    "Let us see the definition of the event:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "62eb3b81-30d6-4f56-b4c0-8cf141ddc749",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Global list of transit times.\n",
    "tt_list = []\n",
    "\n",
    "# The callback that will be invoked\n",
    "# when a transit is detected.\n",
    "def cb(ta, time, d_sgn):\n",
    "    # Append the transit time to the\n",
    "    # global list.\n",
    "    tt_list.append(time)\n",
    "\n",
    "# Define the event object.\n",
    "tt_event = hy.nt_event(hy.expression(\"y_1\"),                 # The event equation.\n",
    "                       cb,                                   # The callback.\n",
    "                       direction=hy.event_direction.positive # The event direction.\n",
    "                      )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e027a4f-4313-4e06-abb5-c411f8bdcf75",
   "metadata": {},
   "source": [
    "We can now proceed to the creation of the integrator object. After creation, we will adjust the system state so that the centre of mass of the system is in the origin with zero velocity:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d779db8a-c2e0-4156-ac83-410caa6b9c56",
   "metadata": {},
   "outputs": [],
   "source": [
    "ta = hy.taylor_adaptive(sys, [0.]*6 + list(r1) + list(v1) + list(r2) + list(v2),\n",
    "                       nt_events = [tt_event])\n",
    "\n",
    "# Adjust the COM.\n",
    "com_x = np.sum(ta.state[0::6] * masses) / np.sum(masses)\n",
    "com_y = np.sum(ta.state[1::6] * masses) / np.sum(masses)\n",
    "com_z = np.sum(ta.state[2::6] * masses) / np.sum(masses)\n",
    "\n",
    "com_vx = np.sum(ta.state[3::6] * masses) / np.sum(masses)\n",
    "com_vy = np.sum(ta.state[4::6] * masses) / np.sum(masses)\n",
    "com_vz = np.sum(ta.state[5::6] * masses) / np.sum(masses)\n",
    "\n",
    "ta.state[0::6] -= com_x\n",
    "ta.state[1::6] -= com_y\n",
    "ta.state[2::6] -= com_z\n",
    "ta.state[3::6] -= com_vx\n",
    "ta.state[4::6] -= com_vy\n",
    "ta.state[5::6] -= com_vz"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fc5a5c80-5ba5-4118-9c3c-02e2c24602e9",
   "metadata": {},
   "source": [
    "Let us now propagate the system state for a few time units. Whenever a transit is detected, the callback will be invoked and the global list of transit times will be updated:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b155c48e-3b29-4c44-bab3-461e9984fa51",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(<taylor_outcome.time_limit: -4294967299>,\n",
       " 0.22961192655192386,\n",
       " 0.4928525973772426,\n",
       " 3344)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ta.propagate_until(1100.)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b907afcc-a795-4424-b7f3-36bd10b66254",
   "metadata": {},
   "source": [
    "We can now proceed to the analysis of the transit times. First we will run a linear fit to remove the linear trend from the transit times:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9e7e4a20-6f6b-42f8-8c83-8ff78c1d314c",
   "metadata": {},
   "outputs": [],
   "source": [
    "N = len(tt_list)\n",
    "\n",
    "A = np.vstack([np.ones(N), range(N)]).T\n",
    "c, m = np.linalg.lstsq(A, tt_list, rcond=-1)[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a7d1620e-2750-47ad-b023-ac29817af170",
   "metadata": {},
   "source": [
    "We are now ready to visualize the transit time variations (TTVs):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c8eb4e22-221c-4d8b-ae65-76c9613e35ca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "fig = plt.figure(figsize=(10,5))\n",
    "ax = plt.subplot(111)\n",
    "ax.set_xlim([0,N])\n",
    "ax.set_ylim([-0.8, 1.])\n",
    "ax.set_xlabel(\"Transit number\")\n",
    "ax.set_ylabel(\"TTV [hours]\")\n",
    "plt.scatter(range(N), (np.array(tt_list)-m*np.array(range(N))-c)*(24.*365./2./np.pi));"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5dc5a888-a29c-49e4-8472-5f1ffd6029be",
   "metadata": {},
   "source": [
    "The transit times deviate from a purely linear behaviour because of the perturbations induced onto the inner planet by the outer planet."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
