{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "61d7a4e5",
   "metadata": {},
   "source": [
    "Continuation of Periodic Orbits in the CR3BP\n",
    "=====================================\n",
    "\n",
    "In this example, we will show how it is possible to use heyoka.py's [expression system](<./The expression system.ipynb>), to compute the state transition matrix of the [circular restricted three-body problem](<./The restricted three-body problem.ipynb>) via [variational equations](<./The variational equations.ipynb>) and outline its use to find periodic orbits via a simple continuation scheme.\n",
    "\n",
    "**NOTE**: There is quite some literature on finding periodic orbits in the CR3BP, a plethora of very clever techniques have been developed in the past. This notebook implements only a basic approach as it only aims to show the use of heyoka in this field.\n",
    "\n",
    "We make some standard imports:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8b2a7edb",
   "metadata": {},
   "outputs": [],
   "source": [
    "import heyoka as hy\n",
    "import numpy as np\n",
    "import time \n",
    "\n",
    "from scipy.optimize import root_scalar\n",
    "\n",
    "from matplotlib.pylab import plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b2e5665b",
   "metadata": {},
   "source": [
    "... and define some functions that will help later on to visualize our trajectories and make nice plots. (ignore them and come back to this later in case you are curious)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a6309475",
   "metadata": {},
   "outputs": [],
   "source": [
    "def compute_L_points(mu, f):\n",
    "    \"\"\"Computes The exact position of the Lagrangian points. To do so it finds the zeros of the\n",
    "    the dynamics equation for px.\n",
    "    \n",
    "        Args:\n",
    "            mu (float): The value of the mu parameter.\n",
    "            f (heyoka expression): The px dynamics equation.\n",
    "\n",
    "        Returns:\n",
    "            xL1, xL2, xL3, xL45, yL45: The coordinates of the various Lagrangian Points\n",
    "    \"\"\"\n",
    "    # Position of the lagrangian points approximated\n",
    "    xL1 = (mu-1) + (mu/3/(1-mu))**(1/3)\n",
    "    xL2 = (mu-1) - (mu/3/(1-mu))**(1/3)\n",
    "    xL3 = -(mu-1) - 7/12 * mu / (1-mu)\n",
    "    yL45 = np.sin(60/180*np.pi)\n",
    "    xL45 = -0.5 + mu\n",
    "\n",
    "    # Solve for the static equilibrium from the approximated solution\n",
    "    def equilibrium(expr, x,y):\n",
    "        retval = hy.eval(expr, {\"x\":x, \"y\":y, \"z\":0, \"px\":-y, \"py\":x, \"pz\":0}, [mu])\n",
    "        return retval\n",
    "    xL1 = root_scalar(lambda x: equilibrium(f, x,0.), x0=xL1,x1=xL1-1e-2).root\n",
    "    xL2 = root_scalar(lambda x: equilibrium(f, x,0.), x0=xL2,x1=xL2-1e-2).root\n",
    "    xL3 = root_scalar(lambda x: equilibrium(f, x,0.), x0=xL3,x1=xL3-1e-2).root;\n",
    "    return xL1, xL2, xL3, xL45, yL45\n",
    "\n",
    "def potential_function(position,mu):\n",
    "    \"\"\"Computes the system potential\n",
    "        Args:\n",
    "            position (array-like): The position in Cartesian coordinates\n",
    "            mu (float): The value of the mu parameter.\n",
    "\n",
    "        Returns:\n",
    "            The potential\n",
    "    \"\"\"\n",
    "    x,y,z=position\n",
    "    r_1=np.sqrt((x-mu)**2+y**2+z**2)\n",
    "    r_2=np.sqrt((x-mu+1)**2+y**2+z**2)\n",
    "    Omega=1./2.*(x**2+y**2)+(1-mu)/r_1+mu/r_2\n",
    "    return Omega\n",
    "\n",
    "def jacobi_constant(state,mu):\n",
    "    \"\"\"Computes the system Jacobi constant\n",
    "        Args:\n",
    "            state (array-like): The system state (x,y,z,px,py,pz)\n",
    "            mu (float): The value of the mu parameter.\n",
    "\n",
    "        Returns:\n",
    "            The Jacobi constant for the state\n",
    "    \"\"\"\n",
    "    x,y,z,px,py,pz=state\n",
    "    vx = px + y\n",
    "    vy = py - x\n",
    "    vz = pz\n",
    "    r_1=np.sqrt((x-mu)**2+y**2+z**2)\n",
    "    r_2=np.sqrt((x-mu+1)**2+y**2+z**2)\n",
    "    Omega=1/2*(x**2+y**2)+(1-mu)/r_1+mu/r_2\n",
    "    T=1/2*(vx**2+vy**2+vz**2)\n",
    "    C=Omega-T\n",
    "    return C"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c23101e",
   "metadata": {},
   "source": [
    "## The Circular Restricted 3 Body Problem dynamics"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "excited-uganda",
   "metadata": {},
   "source": [
    "Let us start defining the equations of motion for the Circular Restricted 3 Body Problem (CR3BP from now on). \n",
    "\n",
    "The problem is usually formulated in a rotating reference frame in which the two massive bodies are at rest. In the rotating reference frame, the equations of motion for the massless particle's cartesian coordinates $\\left(x, y, z\\right)$ and conjugated momenta $\\left(p_x, p_y, p_z\\right)$ read:\n",
    "\n",
    "$$\n",
    "\\begin{aligned}\n",
    "\\dot{x} & = p_x+y,\\\\\n",
    "\\dot{y} & = p_y-x, \\\\\n",
    "\\dot{z} & = p_z, \\\\\n",
    "\\dot{p}_x & = p_y - \\frac{1-\\mu}{r_{PS}^3}\\left( x - \\mu \\right)-\\frac{\\mu}{r_{PJ}^3}\\left( x - \\mu + 1\\right), \\\\\n",
    "\\dot{p}_y & = -p_x-\\left( \\frac{1-\\mu}{r_{PS}^3} +  \\frac{\\mu}{r_{PJ}^3}\\right)y, \\\\\n",
    "\\dot{p}_z & = -\\left( \\frac{1-\\mu}{r_{PS}^3} +  \\frac{\\mu}{r_{PJ}^3}\\right)z,\n",
    "\\end{aligned}\n",
    "$$\n",
    "\n",
    "where $\\mu$ is a mass parameter, $r_{PS}^2=\\left( x-\\mu \\right)^2+y^2+z^2$ and $r_{PJ}^2=\\left( x -\\mu + 1 \\right)^2+y^2+z^2$. \n",
    "\n",
    "NOTE: In these equations it is assumed that $M_1 + M_2 = 1$ and the Cavendish constant $G=1$. The biggest mass is then indicated with $1-\\mu$, while the smallest with $\\mu$. The biggest mass is placed in $x = \\mu$ and the smallest in $x = \\mu-1$ so that the distance between primaries is also 1. All remaining units are induced by these choices.\n",
    "\n",
    "We also refer to the whole state with the symbol $\\mathbf x = [x,y,z,p_x, p_y, p_z]$ and the right hand side of the dynamic equations with the symbol $\\mathbf f$ so that $\\dot{\\mathbf x} = \\mathbf f(\\mathbf x)$. In general we use bold for vectors matrices and normal fonts for their components, hence $\\mathbf M$ will, as an example, have components $M_{ij}$.\n",
    "\n",
    "With respect to the heyoka.py notebook on [circular restricted three-body problem](<./The restricted three-body problem.ipynb>), we will be here making use of numpy arrays of heyoka expressions as to simplify the notation later on when we need to compute the variational equations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "confused-excellence",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create the symbolic variables.\n",
    "symbols_state = [\"x\", \"y\", \"z\", \"px\", \"py\", \"pz\"]\n",
    "x = np.array(hy.make_vars(*symbols_state))\n",
    "# This will contain the r.h.s. of the equations\n",
    "f = []\n",
    "\n",
    "rps_32 = ((x[0] - hy.par[0])**2 + x[1]**2 + x[2]**2)**(-3/2.)\n",
    "rpj_32 = ((x[0] - hy.par[0]  + 1.)**2 + x[1]**2 + x[2]**2)**(-3/2.)\n",
    "\n",
    "# The equations of motion.\n",
    "f.append(x[3] + x[1])\n",
    "f.append(x[4] - x[0])\n",
    "f.append(x[5])\n",
    "f.append(x[4] - (1. - hy.par[0]) * rps_32 * (x[0] - hy.par[0]) - hy.par[0] * rpj_32 * (x[0] - hy.par[0] + 1.))\n",
    "f.append(-x[3] -((1. - hy.par[0]) * rps_32 + hy.par[0] * rpj_32) * x[1])\n",
    "f.append(-((1. - hy.par[0]) * rps_32 + hy.par[0] * rpj_32) * x[2])\n",
    "f = np.array(f)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "978a0065",
   "metadata": {},
   "source": [
    "## The variational equations"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23fb01fa",
   "metadata": {},
   "source": [
    "We now compute the variational equations expressing the state transition matrix defined as $\\delta \\mathbf x(t) = \\mathbf \\Phi(t)\\delta \\mathbf x(0)$. We define its $ij$ component as:\n",
    "\n",
    "$$\n",
    "\\Phi_{ij}(t) = \\frac{d x_i(t)}{dx_j(0)}\n",
    "$$\n",
    "\n",
    "hence the variational equations:\n",
    "\n",
    "$$\n",
    "\\frac{d }{dt} \\Phi_{ij}(t) = \\frac{d}{dt}\\left(\\frac{d x_i(t)}{dx_j(0)}\\right) = \\frac{d}{dx_j(0)}\\left(\\frac{d x_i(t)}{dt}\\right) = \\frac{d f_i(x(t))}{dx_j(0)}\n",
    "$$\n",
    "\n",
    "expanding the total derivative in the last term we get:\n",
    "\n",
    "$$\n",
    "\\frac{d}{dt}\\Phi_{ij}(t) = \\sum_k \\frac{\\partial f_i}{\\partial x_k}\\frac{dx_k(t)}{dx_j(0)}=\\sum_k \\frac{\\partial f_i}{\\partial x_k} \\Phi_{kj}(t)\n",
    "$$\n",
    "\n",
    "which can be written in compact matrix form as:\n",
    "\n",
    "$$\n",
    "\\frac{d}{dt}\\mathbf \\Phi(t) = \\left[\\frac{\\partial f_i}{\\partial x_k}\\right] \\mathbf \\Phi(t)\n",
    "$$\n",
    "\n",
    "Note that the initial conditions are, trivially: $\\mathbf \\Phi(0) = \\mathbf I$\n",
    "\n",
    "Let us then introduce these variational equations using heyoka.\n",
    "\n",
    "First, we define the various symbols for the components of the state transition matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "76d34b7d",
   "metadata": {},
   "outputs": [],
   "source": [
    "symbols_phi = []\n",
    "for i in range(6):\n",
    "    for j in range(6):\n",
    "        # Here we define the symbol for the variations\n",
    "        symbols_phi.append(\"phi_\"+str(i)+str(j))  \n",
    "phi = np.array(hy.make_vars(*symbols_phi)).reshape((6,6))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c03385dc",
   "metadata": {},
   "source": [
    "Then we find the various $\\left[\\frac{\\partial f_i}{\\partial x_k}\\right]$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b1bd6632",
   "metadata": {},
   "outputs": [],
   "source": [
    "dfdx = []\n",
    "for i in range(6):\n",
    "    for j in range(6):\n",
    "        dfdx.append(hy.diff(f[i],x[j]))\n",
    "dfdx = np.array(dfdx).reshape((6,6))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "91426c62",
   "metadata": {},
   "source": [
    "... and finally the r.h.s. of the variational equations is:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "4f3f2e07",
   "metadata": {},
   "outputs": [],
   "source": [
    "# The (variational) equations of motion\n",
    "dphidt = dfdx@phi"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d27c0f5",
   "metadata": {},
   "source": [
    "how very very beautiful!\n",
    "\n",
    "**NOTE**: The variational equations are here written for a chaotic system, thus for long interation times the variations can explode and have a negative influence for the step size control. Nothing we can do about it, it's chaos! "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad47ad1a",
   "metadata": {},
   "source": [
    "## Putting all together and integrating some initial conditions\n",
    "Let us put all the equations 6 + 6x6 = 42 into one big Taylor integrator and perform one numerical integration.\n",
    "\n",
    "First, we create the dynamics ..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "65949284",
   "metadata": {},
   "outputs": [],
   "source": [
    "dyn = []\n",
    "for state, rhs in zip(x,f):\n",
    "    dyn.append((state, rhs))\n",
    "for state, rhs in zip(phi.reshape((36,)),dphidt.reshape((36,))):\n",
    "    dyn.append((state, rhs))\n",
    "# These are the initial conditions on the variational equations (the identity matrix)\n",
    "ic_var = np.eye(6).reshape((36,)).tolist()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "47618ce7",
   "metadata": {},
   "source": [
    "... then we instantiate the Taylor integrator (high accuracy and no compact mode)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "37433a60",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- 8.841164350509644 seconds --- to build the Taylor integrator\n"
     ]
    }
   ],
   "source": [
    "start_time = time.time()\n",
    "ta = hy.taylor_adaptive(\n",
    "    # The ODEs.\n",
    "    dyn,\n",
    "    # The initial conditions.\n",
    "    [-0.45, 0.80, 0.00, -0.80, -0.45, 0.58] + ic_var,\n",
    "    # Operate below machine precision\n",
    "    # and in high-accuracy mode.\n",
    "    tol = 1e-18, high_accuracy = True\n",
    ")\n",
    "print(\"--- %s seconds --- to build the Taylor integrator\" % (time.time() - start_time))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c4abd67d",
   "metadata": {},
   "source": [
    "... and we perform and time a numerical propagation for these conditions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "3acbb840",
   "metadata": {},
   "outputs": [],
   "source": [
    "ic = [-0.80, 0.0, 0, 0.0, -0.6276410653920693, 0.]\n",
    "t_final=200\n",
    "mu=0.01\n",
    "ta.pars[0] = mu\n",
    "# Reset the state\n",
    "ta.time = 0\n",
    "ta.state[:] = ic + ic_var\n",
    "# Time grid\n",
    "t_grid = np.linspace(0, t_final, 2000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c02c7bac",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- 0.05987715721130371 seconds --- to propagate\n"
     ]
    }
   ],
   "source": [
    "# Go ...\n",
    "start_time = time.time()\n",
    "out = ta.propagate_grid(t_grid)\n",
    "print(\"--- %s seconds --- to propagate\" % (time.time() - start_time))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "67d3a6e3",
   "metadata": {},
   "source": [
    "To check and validate, let's plot the trajectory and some cosmetics to visualize the solution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "51ae7e56",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x7f8c3fcee110>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x1008 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(14,14))\n",
    "\n",
    "# Lets find the postiion of the lagrangian points\n",
    "xL1, xL2, xL3, xL45, yL45 = compute_L_points(mu, f[3])\n",
    "# We also compute the Jacobi constant\n",
    "C_jacobi = jacobi_constant(ic, mu)\n",
    "\n",
    "# Plot the trajectory (xy)\n",
    "plt.subplot(1,2,1)\n",
    "plt.plot(out[4][:, 0], out[4][:, 1])\n",
    "plt.xlabel(\"x\")\n",
    "plt.ylabel(\"y\")\n",
    "# Plot the zero velocity curve\n",
    "xx = np.linspace(-1.5,1.5,2000)\n",
    "yy = np.linspace(-1.5,1.5,2000)\n",
    "x_grid,y_grid = np.meshgrid(xx,yy)\n",
    "im = plt.imshow( ((potential_function((x_grid,y_grid,np.zeros(np.shape(x_grid))),mu=mu)<=C_jacobi)).astype(int) , \n",
    "                extent=(x_grid.min(),x_grid.max(),y_grid.min(),y_grid.max()),origin=\"lower\", cmap=\"Greens\")\n",
    "# Plot the lagrangian points and primaries\n",
    "plt.scatter(mu, 0, c='k', s=300)\n",
    "plt.scatter(mu-1, 0, c='k', s=150)\n",
    "plt.scatter(xL1, 0, c='r')\n",
    "plt.scatter(xL2, 0, c='r')\n",
    "plt.scatter(xL3, 0, c='r')\n",
    "plt.scatter(-0.5+mu, yL45, c='r')\n",
    "plt.scatter(-0.5+mu, -yL45, c='r')\n",
    "\n",
    "# Plot the trajectory (xz)\n",
    "plt.subplot(1,2,2)\n",
    "plt.plot(out[4][:, 0], out[4][:, 2])\n",
    "plt.xlabel(\"x\")\n",
    "plt.ylabel(\"z\");\n",
    "# Plot the zero velocity curve\n",
    "xx = np.linspace(-1.5,1.5,2000)\n",
    "zz = np.linspace(-1.5,1.5,2000)\n",
    "x_grid,z_grid = np.meshgrid(xx,zz)\n",
    "im = plt.imshow( ((potential_function((x_grid,np.zeros(np.shape(x_grid)), z_grid),mu=mu)<=C_jacobi)).astype(int) , \n",
    "                extent=(x_grid.min(),x_grid.max(),z_grid.min(),z_grid.max()),origin=\"lower\", cmap=\"Greens\")\n",
    "# Plot the lagrangian points and primaries\n",
    "plt.scatter(mu, 0, c='k', s=300)\n",
    "plt.scatter(mu-1, 0, c='k', s=150)\n",
    "plt.scatter(xL1, 0, c='r')\n",
    "plt.scatter(xL2, 0, c='r')\n",
    "plt.scatter(xL3, 0, c='r')\n",
    "plt.scatter(-0.5+mu, 0, c='r')\n",
    "plt.scatter(-0.5+mu, 0, c='r')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0098b9ee",
   "metadata": {},
   "source": [
    "All fine ..... at least visually! So far we have not made use of the variational equations at all, but this is about to change!"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "001e24d2",
   "metadata": {},
   "source": [
    "## Finding Periodic Orbits\n",
    "To find a periodic orbit in a dynamical system, a first step to then possibly find a whole family of them, we will proceed as follows:\n",
    "\n",
    "* Get some *decent* initial conditions, for example one can use the [Poincaré–Lindstedt method](https://en.wikipedia.org/wiki/Poincar%C3%A9%E2%80%93Lindstedt_method) or, in the specific case of the CR3BP, the work from Richardson).\n",
    "\n",
    "Richardson, D. L. (1980). Analytic construction of periodic orbits about the collinear points. Celestial mechanics, 22(3), 241-253.\n",
    "\n",
    "* Once some initial guess $\\mathbf x_0$ is available for the initial state and $T$ for the period, we write the Taylor first order expansion of the system solution as:\n",
    "\n",
    "$$\n",
    "\\mathbf x = \\overline {\\mathbf x} + \\mathbf \\Phi \\delta \\mathbf x_0 + \\mathbf \\Phi_T \\delta T\n",
    "$$\n",
    "\n",
    "where $\\mathbf \\Phi = \\left[\\frac{\\partial x_i}{\\partial x_{0_k}}\\right] $ is computed via the variational equations, $\\mathbf \\Phi_T = \\left[\\frac{\\partial x_i}{\\partial t}\\right] = \\dot{\\mathbf x} = \\mathbf f$ and $\\overline {\\mathbf x}$ is the final state reached starting from $\\mathbf x_0$ and integrating for $T$. Such an expansion tells us how much the state evaluated in $T$ would change if we move the initial conditions by $\\delta\\mathbf x_0$ and the integration time by $\\delta T$. \n",
    "\n",
    "* Now (**pay attention, as here is the whole trick**), we write the periodicity condition enforcing that after $T+\\delta T$ the state goes back to $\\mathbf x_0 + \\delta \\mathbf x_0$:\n",
    "\n",
    "$$\n",
    "\\overline {\\mathbf x} + \\mathbf \\Phi \\delta \\mathbf x_0 + \\mathbf f \\delta T = \\mathbf x_0 + \\delta \\mathbf x_0\n",
    "$$\n",
    "\n",
    "which is rearranged in the form:\n",
    "\n",
    "$$\n",
    "\\left(\\mathbf \\Phi -\\mathbf I\\right) \\delta \\mathbf x_0 + \\mathbf f \\delta T = \\mathbf x_0 -\\overline {\\mathbf x}\n",
    "$$\n",
    "\n",
    "This fundamental relation is at the basis of any numerical algorithm that wants to find a closed periodic orbit. It is a system of 6 equation in the 7 unknowns $\\delta \\mathbf x, \\delta T$: as a consequence, it is overdetermined. We then must choose among the infinitely many solutions one. We do so adding the Poincare' phasing condition, which requests that:\n",
    "\n",
    "$$\n",
    "\\mathbf f \\cdot \\delta \\mathbf x_0 =  \\mathbf 0\n",
    "$$\n",
    "in other word we will restrict our $\\delta x$ to the hyperplane plane perpendicular to the dynamics.\n",
    "\n",
    "We now have seven equations and seven unknowns. Seems like we are done (as far as $\\mathbf \\Phi -\\mathbf I$ has full rank). \n",
    "\n",
    "Let us implement a naive iterative scheme and close some orbit. \n",
    "\n",
    "First we play to find a decent initial condition ...."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "f98598d0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# New mu parameter (no reason to change, just came out playing)\n",
    "mu = 0.01215057\n",
    "# Initial guess for the integration time (will eventually converge to a period)\n",
    "t_final = 3.\n",
    "# We recomupte the lagrangian points\n",
    "xL1, xL2, xL3, xL45, yL45 = compute_L_points(mu, f[3])\n",
    "\n",
    "# Initial conditions in the cartesian representation x,y,z,vx,vy,vz\n",
    "ic_cart = [ -8.36809444e-01, 0.,0.,0.,  -8.85435468e-04, 0.]\n",
    "ic = [ic_cart[0], ic_cart[1], ic_cart[2], ic_cart[3]- ic_cart[1], ic_cart[4] + ic_cart[0], ic_cart[5]]\n",
    "# We recompute  the Jacobi constant\n",
    "C_jacobi = jacobi_constant(ic, mu)\n",
    "\n",
    "# Reset the state\n",
    "ta.time = 0.\n",
    "ta.state[:] = ic + ic_var\n",
    "ta.pars[0] = mu\n",
    "# Time grid\n",
    "t_grid = np.linspace(0, t_final, 2000)\n",
    "# Go ...\n",
    "out0 = ta.propagate_grid(t_grid)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c5fc9876",
   "metadata": {},
   "source": [
    "We plot the initial orbit (zooming in the Lagrangian point)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b6c18355",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(-0.005, 0.005)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 648x648 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(9,9))\n",
    "\n",
    "plt.subplot(1,1,1)\n",
    "zoom=0.005\n",
    "plt.plot(out0[4][:, 0], out0[4][:, 1],'r')\n",
    "\n",
    "plt.xlabel(\"x\")\n",
    "plt.ylabel(\"y\")\n",
    "\n",
    "# Plot the zero velocity curve\n",
    "xx = np.linspace(xL1-zoom,xL1+zoom,2000)\n",
    "yy = np.linspace(-zoom,zoom,2000)\n",
    "x_grid,y_grid = np.meshgrid(xx,yy)\n",
    "im = plt.imshow( ((potential_function((x_grid,y_grid,np.zeros(np.shape(x_grid))),mu=mu)<=C_jacobi)).astype(int) , \n",
    "                extent=(x_grid.min(),x_grid.max(),y_grid.min(),y_grid.max()),origin=\"lower\", cmap=\"Greens\")\n",
    "\n",
    "# Plot the lagrangian points and primaries\n",
    "plt.scatter(mu, 0, c='k', s=300)\n",
    "plt.scatter(mu-1, 0, c='k', s=100)\n",
    "plt.scatter(xL1, 0, c='r')\n",
    "plt.scatter(xL2, 0, c='r')\n",
    "plt.scatter(xL3, 0, c='r')\n",
    "plt.scatter(-0.5+mu, yL45, c='r')\n",
    "plt.scatter(-0.5+mu, -yL45, c='r')\n",
    "\n",
    "\n",
    "plt.xlim(xL1-zoom, xL1+zoom)\n",
    "plt.ylim(-zoom, +zoom)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ce34c88",
   "metadata": {},
   "source": [
    "The orbit is good but does not close! Let us build an iteration that corrects $x_0,y_0, z_0, p_{x_0}, p_{y_0}, p_{z_0}, T$ as to close the orbit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b8b461e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "def corrector(ta, x0):\n",
    "    \"\"\"\n",
    "    Performs and logs a step of a corrector algorithm that takes a numerical integration from x0 -> T -> xf. The result\n",
    "    is a new tentative x0 that should result in a closed orbit.\n",
    "    \"\"\"\n",
    "    x0 = np.array(x0)\n",
    "    mu = ta.pars[0]\n",
    "    t_final = ta.time\n",
    "    \n",
    "    state_T = ta.state[:6]\n",
    "    state_T_dict = {\"x\":state_T[0], \"y\":state_T[1], \"z\":state_T[2], \"px\":state_T[3], \"py\":state_T[4], \"pz\":state_T[5]}\n",
    "    \n",
    "    Phi = ta.state[6:].reshape((6,6))\n",
    "    dynT = np.array([hy.eval(f[i], state_T_dict, [mu]) for i in range(6)]).reshape((-1,1))\n",
    "\n",
    "    # We add as last state delta T\n",
    "    A = np.concatenate((Phi-np.eye(6),dynT), axis=1)\n",
    "    # We add the Poicare phasing condition as a last equation\n",
    "    phasing_cond = np.insert(dynT,-1,0).reshape((1,-1))\n",
    "\n",
    "    A = np.concatenate((A, phasing_cond))\n",
    "    # We construct the r.h.s.\n",
    "    b = (x0 - state_T).reshape(-1,1)\n",
    "    print(\"error was:\", np.linalg.norm(b))\n",
    "    # need to add the zero corresponding to the phasing condition\n",
    "    b = np.insert(b,-1,0)\n",
    "    \n",
    "    delta = np.linalg.inv(A)@b\n",
    "    print(\"condition number is:\", np.linalg.cond(A))\n",
    "    \n",
    "    x0_new = x0+delta[:6]\n",
    "    t_final = t_final+delta[-1]\n",
    "\n",
    "    # Reset the state\n",
    "    ta.time = 0.\n",
    "    ta.state[:] = x0_new.reshape((-1,)).tolist() + ic_var\n",
    "    # Go ...\n",
    "    ta.propagate_until(t_final)\n",
    "    # New error is:\n",
    "    b = (x0_new - ta.state[:6]).reshape(-1,1)\n",
    "    print(\"new error is:\", np.linalg.norm(b))\n",
    "    return ta, x0_new.tolist()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "302c9d26",
   "metadata": {},
   "source": [
    "Lets do some corrector iterations (not too many since as we get near to a periodic orbit, the condition number will explode)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "0b026400",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "error was: 0.0012972874387692276\n",
      "condition number is: 16558416264.734539\n",
      "new error is: 0.001126849965204681\n",
      "error was: 0.001126849965204681\n",
      "condition number is: 112029239.46314885\n",
      "new error is: 0.0053183889144338475\n",
      "error was: 0.0053183889144338475\n",
      "condition number is: 97382195.72003429\n",
      "new error is: 0.0008512521429261343\n",
      "error was: 0.0008512521429261343\n",
      "condition number is: 208596162.10136592\n",
      "new error is: 6.615966053517911e-06\n",
      "error was: 6.615966053517911e-06\n",
      "condition number is: 33988164.58314937\n",
      "new error is: 6.542908735920838e-08\n",
      "error was: 6.542908735920838e-08\n",
      "condition number is: 5547005233.826434\n",
      "new error is: 1.628757863961847e-12\n"
     ]
    }
   ],
   "source": [
    "ic_periodic = ic\n",
    "for i in range(6):\n",
    "    ta, ic_periodic = corrector(ta, ic_periodic)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "087ea83a",
   "metadata": {},
   "source": [
    " .... et voila'!! As expected the iterations converge to a periodic orbit, while the matrix condition number increases to infinite as $\\mathbf \\Phi$ becomes a monodromy matrix.\n",
    " \n",
    "Of course, we now visualize the orbit as to make sure its closed!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "9045f179",
   "metadata": {},
   "outputs": [],
   "source": [
    "t_final = ta.time\n",
    "\n",
    "# We compute  the IC Jacobi constant\n",
    "C_jacobi = jacobi_constant(ic_periodic, mu)\n",
    "\n",
    "# Reset the state\n",
    "ta.time = 0.\n",
    "ta.state[:] = ic_periodic + ic_var\n",
    "ta.pars[0] = mu\n",
    "# Time grid\n",
    "t_grid = np.linspace(0, t_final, 2000)\n",
    "# Go ...\n",
    "out = ta.propagate_grid(t_grid)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "db95db14",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mu:  0.01215057\n",
      "Initial condition: [-8.3660628427188066e-01, 6.8716725011222035e-05, 0.0000000000000000e+00, -2.3615604665605682e-05, -8.3919863043620713e-01, 0.0000000000000000e+00]\n",
      "Period 2.6915996001673941e+00\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x648 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# We plot the initial condition (zoom in the Lagrangian point)\n",
    "plt.figure(figsize=(9,9))\n",
    "\n",
    "plt.subplot(1,1,1)\n",
    "zoom=0.005\n",
    "plt.plot(out0[4][:, 0], out0[4][:, 1],'r')\n",
    "plt.plot(out[4][:, 0], out[4][:, 1],'k')\n",
    "\n",
    "plt.xlabel(\"x\")\n",
    "plt.ylabel(\"y\")\n",
    "\n",
    "# Plot the zero velocity curve\n",
    "xx = np.linspace(xL1-zoom,xL1+zoom,2000)\n",
    "yy = np.linspace(-zoom,zoom,2000)\n",
    "x_grid,y_grid = np.meshgrid(xx,yy)\n",
    "im = plt.imshow( ((potential_function((x_grid,y_grid,np.zeros(np.shape(x_grid))),mu=mu)<=C_jacobi)).astype(int) , \n",
    "                extent=(x_grid.min(),x_grid.max(),y_grid.min(),y_grid.max()),origin=\"lower\", cmap=\"Greens\")\n",
    "\n",
    "# Plot the lagrangian points and primaries\n",
    "plt.scatter(mu, 0, c='k', s=300)\n",
    "plt.scatter(mu-1, 0, c='k', s=100)\n",
    "plt.scatter(xL1, 0, c='r')\n",
    "plt.scatter(xL2, 0, c='r')\n",
    "plt.scatter(xL3, 0, c='r')\n",
    "plt.scatter(-0.5+mu, yL45, c='r')\n",
    "plt.scatter(-0.5+mu, -yL45, c='r')\n",
    "\n",
    "\n",
    "plt.xlim(xL1-zoom, xL1+zoom)\n",
    "plt.ylim(-zoom, +zoom)\n",
    "\n",
    "print(\"mu: \", ta.pars[0])\n",
    "print(f\"Initial condition: [{out[4][0,0]:.16e}, {out[4][0,1]:.16e}, {out[4][0,2]:.16e}, {out[4][0,3]:.16e}, {out[4][0,4]:.16e}, {out[4][0,5]:.16e}]\")\n",
    "print(f\"Period: {t_final:.16e}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a932c57",
   "metadata": {},
   "source": [
    "## Continuing into a family of periodic orbits.\n",
    "\n",
    "Since we now have initial conditions $\\mathbf x_0$ that result in a periodic orbit, necessarily $\\mathbf x_0 =\\overline {\\mathbf x}$, hence the periodicity condition becomes:\n",
    "\n",
    "$$\n",
    "\\left(\\mathbf \\Phi -\\mathbf I\\right) \\delta \\mathbf x_0 + \\mathbf f \\delta T = \\mathbf 0\n",
    "$$\n",
    "\n",
    "which is a system of 6 equations in seven unknowns. Futhermore, the monodromy matrix $\\mathbf \\Phi$ has now the eigenvalue 1, and thus $\\left(\\mathbf \\Phi -\\mathbf I\\right)$ is not invertible! \n",
    "\n",
    "This corresponds, physically, to the fact that there are infinite possibilities to choose  $\\delta \\mathbf x_0$ so that $\\mathbf x_0 + \\delta \\mathbf x_0$ results in a new periodic orbit having period $T + \\delta T$.\n",
    "\n",
    "We still make use of the Poincare' phasing condition so that the overall system we actually consider is:\n",
    "\n",
    "$$\n",
    "\\left\\{\n",
    "\\begin{array}{c}\n",
    "\\left(\\mathbf \\Phi -\\mathbf I\\right) \\delta \\mathbf x_0 + \\mathbf f \\delta T = \\mathbf 0\\\\\n",
    "\\mathbf f \\cdot \\delta \\mathbf x_0 =  0\n",
    "\\end{array}\n",
    "\\right.\n",
    "$$\n",
    "\n",
    "which we write as:\n",
    "\n",
    "$$\n",
    "\\mathbf A_f \\delta {\\mathbf x_f} = \\mathbf 0\n",
    "$$\n",
    "\n",
    "where we considered the full state $\\delta {\\mathbf x_f}$ including both $\\delta \\mathbf x_0$ and $\\delta T$. The rank of the square 7x7 full matrix ${\\mathbf A_f}$ is only 6, thus the linear system admits non trivial solutions. To find them we fix the value of one component of $\\delta {\\mathbf x_f}$ and thus obtain a new system with a reduced state and matrix:\n",
    "\n",
    "$$\n",
    "\\mathbf A_r\\delta {\\mathbf x_r} = \\mathbf b\n",
    "$$\n",
    "\n",
    "This is an overdetermined system of seven equations in six variables, but having only one only solution which we find as:\n",
    "\n",
    "$$\n",
    "\\delta \\mathbf x_r = (\\mathbf A^T \\mathbf A)^{-1}\\mathbf A^T\\mathbf b\n",
    "$$\n",
    "\n",
    "We have thus found a new initial guess to start with to find the next closed orbit in the family."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b5572ba6",
   "metadata": {},
   "source": [
    "To start with, as validation and test of what we got so far, we get the monodromy matrix (from the last numerical integrated periodic orbit) ... "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "93aa5c06",
   "metadata": {},
   "outputs": [],
   "source": [
    "Phi = ta.state[6:].reshape((6,6))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "deb5144a",
   "metadata": {},
   "source": [
    "And compute its eigenvalues"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "72fad6d4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2.67528714e+03+0.j         3.73791653e-04+0.j\n",
      " 9.99999893e-01+0.j         1.00000011e+00+0.j\n",
      " 9.84479860e-01+0.17549759j 9.84479860e-01-0.17549759j]\n"
     ]
    }
   ],
   "source": [
    "eigv = np.linalg.eigvals(Phi)\n",
    "print(eigv)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b8a11ad2",
   "metadata": {},
   "source": [
    "As expecetd we have two eigenvalues $\\lambda_{3,4}$ equal to one, two real ones so that $\\lambda_{1}\\cdot \\lambda_2=1$ (stable and unstable manifold) and two complex conjugated ones $\\lambda_{5}\\cdot \\lambda_6=1$.\n",
    "\n",
    "We write a simple function that takes as argument the result of some numerical integration over periodic conditions and creates new tentative initial guess continuing on the state parameter indexed by *idx*, (defaults to $x$).\n",
    "\n",
    "Note that in the following function we assemble the full matrix $\\mathbf A_f$ completed with the Poincare phase condition and having we consider as state ${\\mathbf x_f} = [\\delta x,\\delta y,\\delta z,\\delta p_x,\\delta p_y,\\delta p_z,\\delta T]$.  We then select a column, fix the corresponding value for the state variable, bring it to the right side and solve the resulting system which is overdetermined, but admits a unique solution since $\\mathbf \\Phi - \\mathbf I$ is singular."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "95cd0c30",
   "metadata": {},
   "outputs": [],
   "source": [
    "def predictor(ta, idx=0, variation=1e-4):\n",
    "    Phi = ta.state[6:].reshape((6,6))\n",
    "    state_T = ta.state[:6]\n",
    "    state_T_dict = {\"x\":state_T[0], \"y\":state_T[1], \"z\":state_T[2], \"px\":state_T[3], \"py\":state_T[4], \"pz\":state_T[5]}\n",
    "    # Using heyoka evaluate to compute the dynamics from its expressions\n",
    "    dynT = np.array([hy.eval(f[i], state_T_dict, [mu]) for i in range(6)]).reshape((-1,1))\n",
    "    # Computing the full A\n",
    "    A = np.concatenate((Phi-np.eye(6), dynT.T))\n",
    "    fullA = np.concatenate((A,np.insert(dynT,-1,0).reshape((-1,1))), axis=1)\n",
    "    # Computing the A resulting from fixing the continuation parameter to a selected state.\n",
    "    A = fullA[:,list(set(range(7))-set([idx]))]\n",
    "    b = - fullA[:,[idx]] * variation\n",
    "    # We solve.\n",
    "    dx = np.linalg.inv((A.T@A)) @ (A.T@b)\n",
    "    # Assembling back the full state (x,y,z,px,py,pz,T)\n",
    "    dx = np.insert(dx,idx,variation)\n",
    "    return dx"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "91c20cc1",
   "metadata": {},
   "source": [
    "We can now use the function to create a new initial guess:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "2dd405d4",
   "metadata": {},
   "outputs": [],
   "source": [
    "dx = predictor(ta)\n",
    "ic_continued_guess = [a+b for a,b in zip(ic_periodic, dx[:6].tolist())]\n",
    "new_T = ta.time + dx[-1]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8f067f1b",
   "metadata": {},
   "source": [
    "Let us visualize as usual the resulting orbit .... (code is repeated for convenience, but its identical to above cells)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "76bdb6b4",
   "metadata": {},
   "outputs": [],
   "source": [
    "C_jacobi = jacobi_constant(ic_continued_guess, mu)\n",
    "\n",
    "# Reset the state\n",
    "ta.time = 0.\n",
    "ta.state[:] = ic_continued_guess + ic_var\n",
    "ta.pars[0] = mu\n",
    "# Time grid\n",
    "t_grid = np.linspace(0, new_T, 2000)\n",
    "# Go ...\n",
    "out2 = ta.propagate_grid(t_grid)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "075ae1f0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(-0.005, 0.005)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x648 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# We plot the initial condition (zoom in the Lagrangian point)\n",
    "plt.figure(figsize=(9,9))\n",
    "\n",
    "plt.subplot(1,1,1)\n",
    "zoom=0.005\n",
    "plt.plot(out0[4][:, 0], out0[4][:, 1], 'r')\n",
    "plt.plot(out[4][:, 0], out[4][:, 1],'k')\n",
    "plt.plot(out2[4][:, 0], out2[4][:, 1],'r')\n",
    "\n",
    "plt.xlabel(\"x\")\n",
    "plt.ylabel(\"y\")\n",
    "\n",
    "# Plot the zero velocity curve\n",
    "xx = np.linspace(xL1-zoom,xL1+zoom,2000)\n",
    "yy = np.linspace(-zoom,zoom,2000)\n",
    "x_grid,y_grid = np.meshgrid(xx,yy)\n",
    "im = plt.imshow( ((potential_function((x_grid,y_grid,np.zeros(np.shape(x_grid))),mu=mu)<=C_jacobi)).astype(int) , \n",
    "                extent=(x_grid.min(),x_grid.max(),y_grid.min(),y_grid.max()),origin=\"lower\", cmap=\"Greens\")\n",
    "\n",
    "# Plot the lagrangian points and primaries\n",
    "plt.scatter(mu, 0, c='k', s=300)\n",
    "plt.scatter(mu-1, 0, c='k', s=100)\n",
    "plt.scatter(xL1, 0, c='r')\n",
    "plt.scatter(xL2, 0, c='r')\n",
    "plt.scatter(xL3, 0, c='r')\n",
    "plt.scatter(-0.5+mu, yL45, c='r')\n",
    "plt.scatter(-0.5+mu, -yL45, c='r')\n",
    "\n",
    "\n",
    "plt.xlim(xL1-zoom, xL1+zoom)\n",
    "plt.ylim(-zoom, +zoom)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b35eea61",
   "metadata": {},
   "source": [
    "It's nearly closed, but not that well .... it will need a correction ... but we can call the same iterations we made previously when we closed the first initial guess, remember?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "b5807f39",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "error was: 0.0002752340511556753\n",
      "condition number is: 15880242.776405573\n",
      "new error is: 9.342943740099994e-07\n",
      "error was: 9.342943740099994e-07\n",
      "condition number is: 79454949069.06136\n",
      "new error is: 5.875935768888823e-09\n",
      "error was: 5.875935768888823e-09\n",
      "condition number is: 889122754775.1113\n",
      "new error is: 1.77451283761602e-13\n"
     ]
    }
   ],
   "source": [
    "ic_continued = ic_continued_guess\n",
    "for i in range(3):\n",
    "    ta, ic_continued = corrector(ta, ic_continued)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "87200ace",
   "metadata": {},
   "source": [
    "And we visualize all the initial guesses and closed orbit found so far:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "849257f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "t_final = ta.time\n",
    "\n",
    "# We compute  the IC Jacobi constant\n",
    "C_jacobi = jacobi_constant(ic_continued, mu)\n",
    "\n",
    "# Reset the state\n",
    "ta.time = 0.\n",
    "ta.state[:] = ic_continued + ic_var\n",
    "ta.pars[0] = mu\n",
    "# Time grid\n",
    "t_grid = np.linspace(0, t_final, 2000)\n",
    "# Go ...\n",
    "out3 = ta.propagate_grid(t_grid)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "04a64a89",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(-0.005, 0.005)"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x648 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# We plot the initial condition (zoom in the Lagrangian point)\n",
    "plt.figure(figsize=(9,9))\n",
    "\n",
    "plt.subplot(1,1,1)\n",
    "zoom=0.005\n",
    "plt.plot(out0[4][:, 0], out0[4][:, 1],'r')\n",
    "plt.plot(out[4][:, 0], out[4][:, 1],'k')\n",
    "plt.plot(out2[4][:, 0], out2[4][:, 1],'r')\n",
    "plt.plot(out3[4][:, 0], out3[4][:, 1],'k')\n",
    "\n",
    "plt.xlabel(\"x\")\n",
    "plt.ylabel(\"y\")\n",
    "\n",
    "# Plot the zero velocity curve\n",
    "xx = np.linspace(xL1-zoom,xL1+zoom,2000)\n",
    "yy = np.linspace(-zoom,zoom,2000)\n",
    "x_grid,y_grid = np.meshgrid(xx,yy)\n",
    "im = plt.imshow( ((potential_function((x_grid,y_grid,np.zeros(np.shape(x_grid))),mu=mu)<=C_jacobi)).astype(int) , \n",
    "                extent=(x_grid.min(),x_grid.max(),y_grid.min(),y_grid.max()),origin=\"lower\", cmap=\"Greens\")\n",
    "\n",
    "# Plot the lagrangian points and primaries\n",
    "plt.scatter(mu, 0, c='k', s=300)\n",
    "plt.scatter(mu-1, 0, c='k', s=100)\n",
    "plt.scatter(xL1, 0, c='r')\n",
    "plt.scatter(xL2, 0, c='r')\n",
    "plt.scatter(xL3, 0, c='r')\n",
    "plt.scatter(-0.5+mu, yL45, c='r')\n",
    "plt.scatter(-0.5+mu, -yL45, c='r')\n",
    "\n",
    "\n",
    "plt.xlim(xL1-zoom, xL1+zoom)\n",
    "plt.ylim(-zoom, +zoom)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
