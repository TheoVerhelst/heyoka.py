{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "35e48da5",
   "metadata": {},
   "source": [
    "# Batch mode\n",
    "\n",
    "heyoka.py's API supports a mode of operation called *batch mode*.\n",
    "In batch mode, all the scalar quantities appearing in a system of ODEs\n",
    "(i.e., state variables, time coordinate, parameters, etc.)\n",
    "are formally replaced by small vectors of fixed size $n$, so that,\n",
    "effectively, multiple ODE systems sharing the same mathematical formulation\n",
    "are being integrated simultaneously using different sets of numerical values.\n",
    "\n",
    "Because modern CPUs support [SIMD instructions](https://en.wikipedia.org/wiki/SIMD),\n",
    "the runtime cost of operating on a vector of $n$ scalar values is roughly\n",
    "equivalent to the cost of operating on a single scalar value, and thus the use of\n",
    "batch mode can lead to an increase in floating-point throughput up to a factor of $n$.\n",
    "\n",
    "It is important to emphasise that batch mode does not reduce\n",
    "the CPU time required to integrate a system of ODEs. Rather, as a fine-grained\n",
    "form of data parallelism, batch mode allows to integrate multiple ODE systems in parallel\n",
    "at no additional cost, and it is thus most useful when the need arise\n",
    "to integrate the same ODE system with different initial conditions and parameters.\n",
    "\n",
    "Although batch mode can in principle be used with all floating-point types supported\n",
    "by heyoka.py, in practice at this time no CPU provides SIMD instructions for extended-precision\n",
    "datatypes. Thus, here we will consider the application of batch mode only to\n",
    "standard ``double`` precision computations.\n",
    "\n",
    "The value of the batch size $n$ can be freely chosen by the user. In order\n",
    "to achieve optimal performance, however, $n$ should match the SIMD width of the\n",
    "processor in use. Because at this time the most widespread SIMD instruction set is\n",
    "[AVX](https://en.wikipedia.org/wiki/Advanced_Vector_Extensions) (available on\n",
    "most x86 processors sold since 2011), in this tutorial we will be using a\n",
    "batch size $n=4$.\n",
    "\n",
    "## The adaptive batch integrator\n",
    "\n",
    "The ``taylor_adaptive_batch`` class is the batch mode counterpart of the adaptive\n",
    "(scalar) integrator [described earlier](<./The adaptive integrator.ipynb>). Although at a high-level\n",
    "the API of ``taylor_adaptive_batch`` is quite similar to the API of\n",
    "``taylor_adaptive``, there are also some important differences that need to be\n",
    "pointed out.\n",
    "\n",
    "In order to present a comprehensive example, we will consider again the integration\n",
    "of the [forced damped pendulum](<./Non-autonomous systems.ipynb>), with a small modification:\n",
    "\n",
    "$$\n",
    "\\begin{cases}\n",
    "x^\\prime = v \\\\\n",
    "v^\\prime = \\cos t - \\alpha v - \\sin(x)\n",
    "\\end{cases}.\n",
    "$$\n",
    "\n",
    "Here $\\alpha$ is an air friction coefficient whose value is left undefined\n",
    "(i.e., $\\alpha$ is a [runtime parameter](<./ODEs with parameters.ipynb>)).\n",
    "\n",
    "Let us begin:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6d512e60",
   "metadata": {},
   "outputs": [],
   "source": [
    "import heyoka as hy\n",
    "\n",
    "# Create the symbolic variables x and v.\n",
    "x, v = hy.make_vars(\"x\", \"v\")\n",
    "\n",
    "# We will be using a batch size of 4.\n",
    "batch_size = 4"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "daee1ded",
   "metadata": {},
   "source": [
    "As usual, we begin by creating the symbolic state variables $x$ and $v$.\n",
    "We also store in a constant the value of the batch size $n = 4$ for later use.\n",
    "\n",
    "Next, we define the equations of motion:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c6f08d60",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Equations of motion.\n",
    "eqns = [(x, v),\n",
    "        (v, hy.cos(hy.time) - hy.par[0]*v - hy.sin(x))]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "366f706d",
   "metadata": {},
   "source": [
    "The friction coefficient $\\alpha$ is implemented as the runtime parameter at index 0 (``par[0]``).\n",
    "\n",
    "We can now proceed to the creation of the batch integrator. We will need to provide batches of initial conditions for $x$ and $v$, and a batch of values for the runtime parameter $\\alpha$. We will choose the following numerical values:\n",
    "\n",
    "$$\n",
    "\\begin{cases}\n",
    "x_0 = \\left( 0.00, 0.01, 0.02, 0.03 \\right ) \\\\\n",
    "v_0 = \\left( 1.85, 1.86, 1.87, 1.88 \\right) \\\\\n",
    "\\alpha = \\left( 0.10, 0.11, 0.12, 0.13 \\right)\n",
    "\\end{cases}.\n",
    "$$\n",
    "\n",
    "Let us see the code:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "148d1c32",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create the integrator object.\n",
    "ta = hy.taylor_adaptive_batch(\n",
    "                        # The dynamics.\n",
    "                        eqns,\n",
    "                        # Initial conditions for x and v.\n",
    "                        state = [[0.00, 0.01, 0.02, 0.03], [1.85, 1.86, 1.87, 1.88]],\n",
    "                        # Values for alpha.\n",
    "                        pars = [[0.10, 0.11, 0.12, 0.13]]\n",
    "                        )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c5161328",
   "metadata": {},
   "source": [
    "The constructor of ``taylor_adaptive_batch`` is very similar to the constructor of\n",
    "``taylor_adaptive``: it has the same mandatory and optional arguments, but the expected\n",
    "array format for the initial conditions and parameter values is different. Specifically, a batch integrator\n",
    "expects as initial conditions and parameter values 2D arrays in which the number of columns represents the batch size.\n",
    "Thus, because in this specific case the array of initial conditions has shape $\\left( 2, 4 \\right)$\n",
    "and the array of parameter values has shape $\\left( 1, 4 \\right)$, the integrator infers that the batch size is 4.\n",
    "\n",
    "Because we didn't provide values for the initial times, the time coordinates are\n",
    "all initialised to zero:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e208f894",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0., 0., 0., 0.])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ta.time"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8a0d615f",
   "metadata": {},
   "source": [
    "Note that, contrary to the scalar integrator, in the batch integrator it is not possible to write directly into the array of time coordinates. The ``set_time()`` method must be used instead."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4876c124",
   "metadata": {},
   "source": [
    "## Step-by-step integration\n",
    "\n",
    "We are now ready to start integrating. Like ``taylor_adaptive``, ``taylor_adaptive_batch``\n",
    "provides ``step()`` functions for integrating forward or backward in time step-by-step.\n",
    "One important difference is that, in order to avoid costly memory allocations,\n",
    "the ``step()`` functions of the batch integrator do not return anything. Rather, the\n",
    "batch integrator maintains an internal vector of outcomes which is updated at the\n",
    "end of each timestep. Let's take a look:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e1e00525",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(<taylor_outcome.success: -4294967297>, 0.205181018733418),\n",
       " (<taylor_outcome.success: -4294967297>, 0.20619730819002183),\n",
       " (<taylor_outcome.success: -4294967297>, 0.20501652806394124),\n",
       " (<taylor_outcome.success: -4294967297>, 0.20408393560444854)]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Perform a single step forward in time.\n",
    "ta.step()\n",
    "\n",
    "# Print the outcomes to screen.\n",
    "ta.step_res"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1789378b",
   "metadata": {},
   "source": [
    "We can see how the integration timestep was successful for all elements of the batch, and how slightly different timesteps were chosen for each element of the batch.\n",
    "\n",
    "Letâ€™s also print to screen the updated state and time arrays:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b2050dc6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "State:\n",
      "[[0.39386703 0.40729224 0.41636627 0.42592189]\n",
      " [1.9748992  1.97901839 1.98231555 1.98573654]]\n",
      "Time:\n",
      "[0.20518102 0.20619731 0.20501653 0.20408394]\n"
     ]
    }
   ],
   "source": [
    "print(\"State:\\n{}\".format(ta.state))\n",
    "print(\"Time:\\n{}\".format(ta.time))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c767bf97",
   "metadata": {},
   "source": [
    "Note that because the initial conditions were all set to similar values,\n",
    "the state of the system after a single timestep also does not change much\n",
    "across the batch elements.\n",
    "\n",
    "Like for ``taylor_adaptive``, the ``step()`` function can be invoked with\n",
    "a vector of time limits: if the adaptive timesteps\n",
    "selected by heyoka are larger (in absolute value) than the specified limits,\n",
    "then the timesteps will be clamped."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "602e8009",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Outcomes:\n",
      "[(<taylor_outcome.time_limit: -4294967299>, 0.01), (<taylor_outcome.time_limit: -4294967299>, 0.011), (<taylor_outcome.time_limit: -4294967299>, 0.012), (<taylor_outcome.time_limit: -4294967299>, 0.013)]\n",
      "State:\n",
      "[[0.41363557 0.42908306 0.44017771 0.45176173]\n",
      " [1.97877363 1.98290874 1.98620849 1.9895667 ]]\n",
      "Time:\n",
      "[0.21518102 0.21719731 0.21701653 0.21708394]\n"
     ]
    }
   ],
   "source": [
    "# Perform a single step forward in time\n",
    "# clamping the maximum absolute values\n",
    "# of the timesteps.\n",
    "ta.step([0.010, 0.011, 0.012, 0.013])\n",
    "\n",
    "# Print the outcomes, state and times to screen.\n",
    "print(\"Outcomes:\\n{}\".format(ta.step_res))\n",
    "print(\"State:\\n{}\".format(ta.state))\n",
    "print(\"Time:\\n{}\".format(ta.time))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "30f96810",
   "metadata": {},
   "source": [
    "## Time-limited propagation\n",
    "\n",
    "The ``propagate_*()`` functions are also available for the\n",
    "batch integrator. Similarly to the ``step()`` functions, the outcomes of the ``propagate_*()``\n",
    "functions are stored in internal vectors of tuples, with the tuple elements representing:\n",
    "\n",
    "* the outcome of the integration,\n",
    "* the minimum and maximum integration timesteps\n",
    "  that were used in the propagation,\n",
    "* the total number of steps that were taken.\n",
    "\n",
    "Let's see a couple of examples:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ebf1b996",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Outcomes:\n",
      "[(<taylor_outcome.time_limit: -4294967299>, 0.1970044860947501, 0.42801809235455385, 34), (<taylor_outcome.time_limit: -4294967299>, 0.19146089929527163, 0.4281140304644997, 38), (<taylor_outcome.time_limit: -4294967299>, 0.18762172169221453, 0.4355633488513558, 41), (<taylor_outcome.time_limit: -4294967299>, 0.18423403769248833, 0.4705364610280495, 44)]\n",
      "State:\n",
      "[[ 4.6268855   2.73976697  1.1534837   0.23501885]\n",
      " [-2.25814471 -1.91965361 -1.77541972 -1.13133003]]\n",
      "Time:\n",
      "[10.21518102 11.21719731 12.21701653 13.21708394]\n",
      "\n",
      "Outcomes:\n",
      "[(<taylor_outcome.time_limit: -4294967299>, 0.2048473837982105, 0.30806885568024933, 40), (<taylor_outcome.time_limit: -4294967299>, 0.21220873200092316, 0.3203303481721456, 38), (<taylor_outcome.time_limit: -4294967299>, 0.22595995123406573, 0.4129644953875965, 35), (<taylor_outcome.time_limit: -4294967299>, 0.21027114609377706, 0.3717536518626975, 34)]\n",
      "State:\n",
      "[[1.80080102 2.83619831 3.4747455  6.29634837]\n",
      " [1.35919698 0.50159786 0.00737693 0.72663002]]\n",
      "Time:\n",
      "[20. 21. 22. 23.]\n"
     ]
    }
   ],
   "source": [
    "# Propagate for different time intervals.\n",
    "ta.propagate_for([10., 11., 12., 13.])\n",
    "\n",
    "print(\"Outcomes:\\n{}\".format(ta.propagate_res))\n",
    "print(\"State:\\n{}\".format(ta.state))\n",
    "print(\"Time:\\n{}\".format(ta.time))\n",
    "\n",
    "# Propagate up to different time coordinates.\n",
    "ta.propagate_until([20., 21., 22., 23.])\n",
    "\n",
    "print(\"\\nOutcomes:\\n{}\".format(ta.propagate_res))\n",
    "print(\"State:\\n{}\".format(ta.state))\n",
    "print(\"Time:\\n{}\".format(ta.time))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "322d3b5f",
   "metadata": {},
   "source": [
    "Let us now reset the integrator to the original initial conditions, and use ``propagate_grid()`` to compute and then plot the time evolution of $x$ for the different batch elements:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "644a71f5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Reset time and state.\n",
    "ta.set_time([0, 0, 0, 0])\n",
    "ta.state[:] = [[0.00, 0.01, 0.02, 0.03], [1.85, 1.86, 1.87, 1.88]]\n",
    "\n",
    "# Create identical time grids.\n",
    "import numpy as np\n",
    "t_grid = np.repeat(np.linspace(0, 100, 1000), batch_size).reshape(1000, -1)\n",
    "\n",
    "# Propagate over the time grids.\n",
    "out = ta.propagate_grid(t_grid)\n",
    "\n",
    "# Plot the time evolution of x.\n",
    "from matplotlib.pylab import plt\n",
    "plt.rcParams[\"figure.figsize\"] = (12,6)\n",
    "plt.plot(t_grid[:, 0], out[:, 0, 0], label=\"Batch element 0\")\n",
    "plt.plot(t_grid[:, 1], out[:, 0, 1], label=\"Batch element 1\")\n",
    "plt.plot(t_grid[:, 2], out[:, 0, 2], label=\"Batch element 2\")\n",
    "plt.plot(t_grid[:, 3], out[:, 0, 3], label=\"Batch element 3\")\n",
    "plt.xlabel(\"Time\")\n",
    "plt.ylabel(\"x\")\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bca8f67e",
   "metadata": {},
   "source": [
    "In this example, we chose to propagate all batch elements using the same time grid, but we could have chosen to propagate different batch elements using different time grids.\n",
    "\n",
    "The plot for the time evolution of $x$ shows how this dynamical system is sensitive to the initial conditions: whereas batch elements 0 and 1 evolve together towards the same periodic behaviour, batch elements 2 and 3 exhibit a qualitatively-different evolution.\n",
    "\n",
    "We can print to screen ``propagate_res`` to find out how many timesteps each batch required and what were the sizes of the smallest and largest integration timesteps:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ae9db239",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(<taylor_outcome.time_limit: -4294967299>,\n",
       "  0.1771218741465665,\n",
       "  0.42922678763927685,\n",
       "  445),\n",
       " (<taylor_outcome.time_limit: -4294967299>,\n",
       "  0.17864079697444896,\n",
       "  0.4311641361512722,\n",
       "  442),\n",
       " (<taylor_outcome.time_limit: -4294967299>,\n",
       "  0.1716673001746401,\n",
       "  0.48845285378321457,\n",
       "  370),\n",
       " (<taylor_outcome.time_limit: -4294967299>,\n",
       "  0.1853603631822091,\n",
       "  0.46761939336987696,\n",
       "  364)]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ta.propagate_res"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a08c267",
   "metadata": {},
   "source": [
    "## Dense output\n",
    "\n",
    "The batch integrator also supports [dense output](<./Dense output.ipynb>). Like for ``taylor_adaptive``,\n",
    "enabling dense output is a two-step process. First we invoke one of the ``step()`` (or ``propagate_*()``) functions\n",
    "with the optional flag ``write_tc`` set to ``True``. This will write the Taylor coefficients that were\n",
    "used to propagate the last timestep into an internal vector:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "8fa2f222",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[ 0.00000000e+00,  1.00000000e-02,  2.00000000e-02,\n",
       "          3.00000000e-02],\n",
       "        [ 1.85000000e+00,  1.86000000e+00,  1.87000000e+00,\n",
       "          1.88000000e+00],\n",
       "        [ 4.07500000e-01,  3.92700083e-01,  3.77800667e-01,\n",
       "          3.62802250e-01],\n",
       "        [-3.21916667e-01, -3.24383503e-01, -3.26716362e-01,\n",
       "         -3.28913775e-01],\n",
       "        [-6.75770833e-02, -6.40280151e-02, -6.04283792e-02,\n",
       "         -5.67795484e-02],\n",
       "        [ 7.02109167e-02,  7.16133044e-02,  7.29717323e-02,\n",
       "          7.42848569e-02],\n",
       "        [ 2.57157556e-02,  2.45104498e-02,  2.32584223e-02,\n",
       "          2.19601549e-02],\n",
       "        [-1.57976537e-02, -1.66107095e-02, -1.74021378e-02,\n",
       "         -1.81703716e-02],\n",
       "        [-1.00353587e-02, -9.68202996e-03, -9.29913499e-03,\n",
       "         -8.88692852e-03],\n",
       "        [ 3.42185259e-03,  3.80286542e-03,  4.17724062e-03,\n",
       "          4.54381437e-03],\n",
       "        [ 3.71632697e-03,  3.63550405e-03,  3.53850922e-03,\n",
       "          3.42533322e-03],\n",
       "        [-5.74043833e-04, -7.39223443e-04, -9.03658931e-04,\n",
       "         -1.06661590e-03],\n",
       "        [-1.32460887e-03, -1.31766585e-03, -1.30272684e-03,\n",
       "         -1.27967575e-03],\n",
       "        [ 8.41486409e-07,  6.80660294e-05,  1.36166728e-04,\n",
       "          2.04736804e-04],\n",
       "        [ 4.54537630e-04,  4.61961397e-04,  4.65753785e-04,\n",
       "          4.65788152e-04],\n",
       "        [ 6.59812726e-05,  4.02165119e-05,  1.34874974e-05,\n",
       "         -1.40032406e-05],\n",
       "        [-1.49384493e-04, -1.56240569e-04, -1.61573706e-04,\n",
       "         -1.65285583e-04],\n",
       "        [-4.50881595e-05, -3.58225773e-05, -2.58851228e-05,\n",
       "         -1.53667581e-05],\n",
       "        [ 4.64593626e-05,  5.05932052e-05,  5.41409729e-05,\n",
       "          5.70383152e-05],\n",
       "        [ 2.29227501e-05,  1.98416708e-05,  1.63700226e-05,\n",
       "          1.25441216e-05],\n",
       "        [-1.33367091e-05, -1.54509288e-05, -1.73630712e-05,\n",
       "         -1.90354790e-05]],\n",
       "\n",
       "       [[ 1.85000000e+00,  1.86000000e+00,  1.87000000e+00,\n",
       "          1.88000000e+00],\n",
       "        [ 8.15000000e-01,  7.85400167e-01,  7.55601333e-01,\n",
       "          7.25604500e-01],\n",
       "        [-9.65750000e-01, -9.73150510e-01, -9.80149086e-01,\n",
       "         -9.86741324e-01],\n",
       "        [-2.70308333e-01, -2.56112060e-01, -2.41713517e-01,\n",
       "         -2.27118194e-01],\n",
       "        [ 3.51054583e-01,  3.58066522e-01,  3.64858662e-01,\n",
       "          3.71424284e-01],\n",
       "        [ 1.54294533e-01,  1.47062699e-01,  1.39550534e-01,\n",
       "          1.31760929e-01],\n",
       "        [-1.10583576e-01, -1.16274967e-01, -1.21814965e-01,\n",
       "         -1.27192601e-01],\n",
       "        [-8.02828694e-02, -7.74562397e-02, -7.43930799e-02,\n",
       "         -7.10954281e-02],\n",
       "        [ 3.07966733e-02,  3.42257887e-02,  3.75951656e-02,\n",
       "          4.08943294e-02],\n",
       "        [ 3.71632697e-02,  3.63550405e-02,  3.53850922e-02,\n",
       "          3.42533322e-02],\n",
       "        [-6.31448217e-03, -8.13145787e-03, -9.94024824e-03,\n",
       "         -1.17327749e-02],\n",
       "        [-1.58953064e-02, -1.58119902e-02, -1.56327221e-02,\n",
       "         -1.53561090e-02],\n",
       "        [ 1.09393233e-05,  8.84858383e-04,  1.77016746e-03,\n",
       "          2.66157845e-03],\n",
       "        [ 6.36352682e-03,  6.46745955e-03,  6.52055299e-03,\n",
       "          6.52103413e-03],\n",
       "        [ 9.89719089e-04,  6.03247679e-04,  2.02312461e-04,\n",
       "         -2.10048609e-04],\n",
       "        [-2.39015189e-03, -2.49984911e-03, -2.58517929e-03,\n",
       "         -2.64456933e-03],\n",
       "        [-7.66498711e-04, -6.08983813e-04, -4.40047088e-04,\n",
       "         -2.61234887e-04],\n",
       "        [ 8.36268527e-04,  9.10677694e-04,  9.74537513e-04,\n",
       "          1.02668967e-03],\n",
       "        [ 4.35532251e-04,  3.76991746e-04,  3.11030429e-04,\n",
       "          2.38338310e-04],\n",
       "        [-2.66734182e-04, -3.09018576e-04, -3.47261424e-04,\n",
       "         -3.80709580e-04],\n",
       "        [-2.15100964e-04, -1.95914860e-04, -1.72450071e-04,\n",
       "         -1.44963795e-04]]])"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Reset time and state.\n",
    "ta.set_time([0, 0, 0, 0])\n",
    "ta.state[:] = [[0.00, 0.01, 0.02, 0.03], [1.85, 1.86, 1.87, 1.88]]\n",
    "\n",
    "# Propagate for a timestep, making\n",
    "# sure the Taylor coefficients are recorded.\n",
    "ta.step(write_tc = True)\n",
    "\n",
    "# Print the array of Taylor coefficients.\n",
    "ta.tc"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "99d835a3",
   "metadata": {},
   "source": [
    "Quite a mouthful! Let's print to screen the order-0 Taylor coefficients\n",
    "of $x$ and $v$ for all batch elements:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "5c15e086",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.  , 0.01, 0.02, 0.03],\n",
       "       [1.85, 1.86, 1.87, 1.88]])"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ta.tc[:, 0, :]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "244e9d6a",
   "metadata": {},
   "source": [
    "Indeed, as expected the order-0 Taylor coefficients correspond to the initial conditions.\n",
    "\n",
    "After computing the Taylor coefficients, we can ask for the dense output\n",
    "at different time coordinates:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "4f8ba717",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.01854043, 0.04735447, 0.07643115, 0.1057593 ],\n",
       "       [1.85805316, 1.87531675, 1.89177968, 1.90743182]])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Compute the dense output at different time coordinates.\n",
    "ta.update_d_output([0.01, 0.02, 0.03, 0.04])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
