{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "2387498c",
   "metadata": {},
   "source": [
    "# Brouwer's law in the outer Solar System\n",
    "\n",
    "In this tutorial we will show how heyoka.py can be used for long-term integrations of the outer Solar System accurate to machine precision.\n",
    "\n",
    "Long-term integrations of the Solar System are often undertaken with [symplectic integrators](https://en.wikipedia.org/wiki/Symplectic_integrator),\n",
    "which guarantee (from the point of view of the integration scheme) the conservation of dynamical invariants such\n",
    "as the total energy of the system. Because energy conservation is enforced by the integration scheme, in symplectic integrators the only\n",
    "source of error for the conservation of the total energy of the system derives from the use of approximate floating-point arithmetics.\n",
    "A result known as *Brouwer's law* establishes that the energy error deriving from the use of floating-point arithmetics cannot grow slower\n",
    "than $\\sim \\sqrt{t}$ (i.e., as a one-dimensional random walk). In other words, for any numerical integrator implemented on a real computer, the optimal behaviour (with respect\n",
    "to energy conservation in long-term integrations) is an error that grows with the square root of time.\n",
    "\n",
    "Although heyoka.py is *not* a symplectic integrator, it is nevertheless able to achieve Brouwer's law, if properly configured. Specifically, in order to achieve Brouwer's law\n",
    "with heyoka.py we will need to:\n",
    "\n",
    "- lower the integration tolerance *below* machine precision, and\n",
    "- adopt techniques to reduce the numerical errors arising from the use of floating-point arithmetics.\n",
    "\n",
    "## The dynamical system\n",
    "\n",
    "In this example we will study the dynamics the outer Solar System, that is, a 6-body problem consisting of the Sun, Jupiter, Saturn, Uranus, Neptune and Pluto,\n",
    "all considered as mutually-interacting point masses. We will adopt the Solar mass $M_\\odot$ as unit of mass, the astronomical unit as unit of distance and the\n",
    "calendar year (365 days) as unit of time.\n",
    "\n",
    "Let us begin with the definition of the numerical constants:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "95116f6c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Masses, from Sun to Pluto.\n",
    "import numpy as np\n",
    "masses = np.array([1.00000597682, 1 / 1047.355, 1 / 3501.6, 1 / 22869., 1 / 19314., 7.4074074e-09])\n",
    "\n",
    "# The gravitational constant.\n",
    "G = 0.01720209895 * 0.01720209895 * 365 * 365"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "809c3046",
   "metadata": {},
   "source": [
    "Note how the Sun's mass is not exactly 1 because we included in it the mass of the terrestrial planets.\n",
    "\n",
    "Next, we define a vector of cartesian initial conditions for the system. The numerical values are taken from [this paper](https://ui.adsabs.harvard.edu/abs/1986AJ.....92..176A/abstract)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2795c18e",
   "metadata": {},
   "outputs": [],
   "source": [
    "ic = [# Sun.\n",
    "      -4.06428567034226e-3, -6.08813756435987e-3, -1.66162304225834e-6, +6.69048890636161e-6 * 365,\n",
    "      -6.33922479583593e-6 * 365, -3.13202145590767e-9 * 365,\n",
    "      # Jupiter.\n",
    "      +3.40546614227466e+0, +3.62978190075864e+0, +3.42386261766577e-2, -5.59797969310664e-3 * 365,\n",
    "      +5.51815399480116e-3 * 365, -2.66711392865591e-6 * 365,\n",
    "      # Saturn.\n",
    "      +6.60801554403466e+0, +6.38084674585064e+0, -1.36145963724542e-1, -4.17354020307064e-3 * 365,\n",
    "      +3.99723751748116e-3 * 365, +1.67206320571441e-5 * 365,\n",
    "      # Uranus.\n",
    "      +1.11636331405597e+1, +1.60373479057256e+1, +3.61783279369958e-1, -3.25884806151064e-3 * 365,\n",
    "      +2.06438412905916e-3 * 365, -2.17699042180559e-5 * 365,\n",
    "      # Neptune.\n",
    "      -3.01777243405203e+1, +1.91155314998064e+0, -1.53887595621042e-1, -2.17471785045538e-4 * 365,\n",
    "      -3.11361111025884e-3 * 365, +3.58344705491441e-5 * 365,\n",
    "      # Pluto.\n",
    "      -2.13858977531573e+1, +3.20719104739886e+1, +2.49245689556096e+0, -1.76936577252484e-3 * 365,\n",
    "      -2.06720938381724e-3 * 365, +6.58091931493844e-4 * 365]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bca6d501",
   "metadata": {},
   "source": [
    "We can now proceed to the definition of the dynamical equations. We will be using the ``make_nbody_sys()`` function, which sets up an ODE system corresponding to an N-body problem in cartesian coordinates:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d2ee9785",
   "metadata": {},
   "outputs": [],
   "source": [
    "import heyoka as hy\n",
    "sys = hy.make_nbody_sys(6, masses = masses, Gconst = G)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "212917f5",
   "metadata": {},
   "source": [
    "The next step is the creation of the numerical integrator. We will be using a [batch integrator](<./Batch mode overview.ipynb>), which will allow us to substantially increase the floating-point throughput by integrating multiple sets of initial conditions at once. When creating the integrator, we will specify a tolerance of $10^{-18}$ (below machine precision) and we will activate high-accuracy mode. In high-accuracy mode, the integrator internally uses techniques (based on [compensated summation](https://en.wikipedia.org/wiki/Kahan_summation_algorithm) and similar algorithms) to reduce the numerical errors arising from the use of floating-point arithmetics, at the price of a slight performance penalty."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f0f99f81",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Multiplex the initial conditions to batches of 4 elements.\n",
    "ic_batch = np.repeat(ic, 4).reshape(-1, 4)\n",
    "\n",
    "# Create the integrator object, specifying a tolerance\n",
    "# below machine precision and activating high-accuracy mode.\n",
    "ta = hy.taylor_adaptive_batch(sys, ic_batch, high_accuracy = True, tol = 1e-18)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be15432c",
   "metadata": {},
   "source": [
    "## Integrating in parallel\n",
    "\n",
    "In order to add statistical weight to our experiment, we will be integrating multiple sets of initial conditions at the same time. Each set of initial conditions will be slightly and randomly altered with respect to the numerical values introduced earlier, which will allow us to study the energy-conservation behaviour of the integrator using an ensemble of different but related problems.\n",
    "\n",
    "As explained earlier, the use of a batch integrator already allows us to integrate multiple sets of initial conditions (4, in this case) at the same time. Additionally, we will concurrently run multiple batch integrators in different threads, in order to take full advantage of modern multi-core processors. The total integration time will be limited to 1 million years.\n",
    "\n",
    "Let us take a look at the code:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "408a8de8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define a logarithmic time grid over which\n",
    "# the integrations will be performed.\n",
    "t_grid = np.repeat(np.logspace(0, 6, 1000), 4).reshape(-1, 4)\n",
    "\n",
    "# Multiplex the masses to batches of 4 elements.\n",
    "masses_batch = np.repeat(masses, 4).reshape(-1, 4)\n",
    "\n",
    "# A function for the computation of the total energy\n",
    "# of the system from the state vector.\n",
    "def energy(st):\n",
    "        # Kinetic energy.\n",
    "        vx = st[3::6]\n",
    "        vy = st[4::6]\n",
    "        vz = st[5::6]\n",
    "        \n",
    "        kin = np.sum(masses_batch * (vx**2 + vy**2 + vz**2) / 2, axis = 0)\n",
    "        \n",
    "        # Potential energy.\n",
    "        pot = 0.\n",
    "        for i in range(6):\n",
    "            xi = st[i*6 + 0, :]\n",
    "            yi = st[i*6 + 1, :]\n",
    "            zi = st[i*6 + 2, :]\n",
    "            \n",
    "            for j in range(i+1, 6):\n",
    "                xj = st[j*6 + 0, :]\n",
    "                yj = st[j*6 + 1, :]\n",
    "                zj = st[j*6 + 2, :]\n",
    "\n",
    "                pot += -G * masses_batch[i] * masses_batch[j] / np.sqrt((xi - xj) * (xi - xj) + (yi - yj) * (yi - yj) + (zi - zj) * (zi - zj))\n",
    "\n",
    "        return kin + pot\n",
    "\n",
    "# The worker function that will be run in each thread.\n",
    "def worker():\n",
    "    from copy import deepcopy\n",
    "    \n",
    "    # Make a deep copy of the original integrator.\n",
    "    ta_local = deepcopy(ta)\n",
    "    \n",
    "    # Randomly alter the initial conditions.\n",
    "    new_state = ta_local.state + abs(ta_local.state) * np.random.uniform(-1e-12, 1e-12, ta_local.state.shape)\n",
    "    \n",
    "    # Determine the new centre of mass and its velocity.\n",
    "    com_x = np.sum(new_state[0::6] * masses_batch, axis=0) / np.sum(masses_batch, axis=0)\n",
    "    com_y = np.sum(new_state[1::6] * masses_batch, axis=0) / np.sum(masses_batch, axis=0)\n",
    "    com_z = np.sum(new_state[2::6] * masses_batch, axis=0) / np.sum(masses_batch, axis=0)\n",
    "\n",
    "    com_vx = np.sum(new_state[3::6] * masses_batch, axis=0) / np.sum(masses_batch, axis=0)\n",
    "    com_vy = np.sum(new_state[4::6] * masses_batch, axis=0) / np.sum(masses_batch, axis=0)\n",
    "    com_vz = np.sum(new_state[5::6] * masses_batch, axis=0) / np.sum(masses_batch, axis=0)\n",
    "   \n",
    "    # Recentre.\n",
    "    new_state[0::6] -= com_x\n",
    "    new_state[1::6] -= com_y\n",
    "    new_state[2::6] -= com_z\n",
    "    \n",
    "    new_state[3::6] -= com_vx\n",
    "    new_state[4::6] -= com_vy\n",
    "    new_state[5::6] -= com_vz\n",
    "   \n",
    "    # Assign the new state.\n",
    "    ta_local.state[:] = new_state\n",
    "    \n",
    "    # Compute the initial energy.\n",
    "    E0 = energy(ta_local.state)\n",
    "\n",
    "    # Integrate over the time grid.\n",
    "    res = ta_local.propagate_grid(t_grid)\n",
    "    \n",
    "    # Check if any batch element produced an error.\n",
    "    if any(oc[0] != hy.taylor_outcome.time_limit for oc in ta_local.propagate_res):\n",
    "        raise RuntimeError(\"Integration failed: {}\".format(ta_local.propagate_res))\n",
    "    \n",
    "    # Compute and return the relative energy error.\n",
    "    return np.array([abs((E0 - energy(st)) / E0) for st in res])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8eb8bf84",
   "metadata": {},
   "source": [
    "The ``worker()`` function will be invoked concurrently from multiple threads of execution. It will first create a local copy of the integrator object, add some noise to the initial conditions, reset the centre of mass and then integrate the system for 1 million years.\n",
    "\n",
    "Let us now run 16 batch integrations concurrently, for a total of $16\\times 4 = 64$ sets of initial conditions.\n",
    "\n",
    "> **NOTE**: the following code will take a while to run (from a few seconds to a few minutes, depending\n",
    "> on the CPU). In order to shorten the runtime, you can reduce the number of threads and/or the total integration time."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "79968137",
   "metadata": {},
   "outputs": [],
   "source": [
    "import concurrent.futures\n",
    "\n",
    "# Run the integrations concurrently.\n",
    "with concurrent.futures.ThreadPoolExecutor() as executor:\n",
    "    futures = []\n",
    "    for _ in range(16):\n",
    "        futures.append(executor.submit(worker))\n",
    "\n",
    "    # Gather the results.\n",
    "    res = np.array([future.result() for future in concurrent.futures.as_completed(futures)])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4762e39e",
   "metadata": {},
   "source": [
    "Let us take a look at the shape of the result array:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "15033eb9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(16, 1000, 4)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fde7b4d5",
   "metadata": {},
   "source": [
    "The first dimension refers to the 16 separate integrations we ran in parallel, the second dimension to the 1000 points in the time grid and the last dimension to the 4 elements in each batch.\n",
    "Let us re-arrange the array in order to facilitate further analysis:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "55200ae1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1000, 64)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res = res.transpose((1, 0, 2)).reshape((1000, -1))\n",
    "res.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f4b5bfd",
   "metadata": {},
   "source": [
    "Now the first dimension refers to the time grid points, and we have squashed into the second dimension the results of all integrations for each time point.\n",
    "\n",
    "## Results\n",
    "\n",
    "We are now ready to plot the results of the integrations. For each time point, we will be plotting:\n",
    "\n",
    "- the relative energy error for all batch elements and parallel integrations,\n",
    "- the root mean square of the relative energy error across all batch elements and parallel integrations.\n",
    "\n",
    "We will also add a dashed line representing Brouwer's law (i.e., $\\sqrt{t}$) for comparison:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "119364b2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib.pylab import plt\n",
    "plt.rcParams[\"figure.figsize\"] = (12,9)\n",
    "\n",
    "# Use log scale on both axes.\n",
    "plt.xscale('log')\n",
    "plt.yscale('log')\n",
    "\n",
    "# Plot all data points.\n",
    "plt.plot(t_grid[:, 0], res, color='gray', marker='.', linestyle='None', alpha=.4, markersize=3.5)\n",
    "\n",
    "# Plot the root mean square computed over all\n",
    "# data points at each timestep.\n",
    "plt.plot(t_grid[:, 0], np.sqrt(np.mean(res*res, axis = 1)), color='k', label=\"RMS\")\n",
    "\n",
    "# Plot sqrt(t).\n",
    "plt.plot(t_grid[:, 0], 1.5e-16 * np.sqrt(t_grid[:, 0]), 'k--', label=\"$\\sqrt{t}$ (Brouwer's law)\")\n",
    "\n",
    "plt.xlabel(\"Time (years)\")\n",
    "plt.ylabel(\"Rel. energy error\")\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8ba18c8b",
   "metadata": {},
   "source": [
    "The plot clearly shows how the average energy error starts out around machine precision and then begins to grow following Brouwer's law. These results indicate that heyoka.py is able to optimally conserve the invariants of a dynamical system over long-term integrations."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
