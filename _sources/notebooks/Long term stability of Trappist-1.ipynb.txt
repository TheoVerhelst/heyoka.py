{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Long term stability of N-body simulations: the case of Trappist-1\n",
    "[TRAPPIST-1](https://en.wikipedia.org/wiki/TRAPPIST-1) is a system made of seven Earth-sized planets, orbiting closely around a small ultra-cool dwarf with periods forming a near-resonant chain. The system is of particular interest as it is considered as a candidate to host extraterrestrial life and it is relatively close to our solar system (âˆ¼40 light years).\n",
    "\n",
    "Here we show how to use *heyoka.py* to setup a simulation to study the long-term stability of the system. For this purpose we will simulate the N-body dynamics of the system directly in Cartesian coordinates and in an inertial reference frame, the equations of motion (EOM) being:\n",
    "\n",
    "$$\n",
    "\\left\\{\n",
    "\\begin{aligned}\n",
    "\\frac{d^2x_i}{dt^2} &= -G \\sum_{i\\ne j}^N \\frac {m_j (x_i-x_j)}{\\left[{(x_i-x_j)^2+(y_i-y_j)^2+(z_i-z_j)^2}\\right]^\\frac 32} \\\\\n",
    "\\frac{d^2y_i}{dt^2} &= -G \\sum_{i\\ne j}^N \\frac {m_j (y_i-y_j)}{\\left[{(x_i-x_j)^2+(y_i-y_j)^2+(z_i-z_j)^2}\\right]^\\frac 32} \\\\\n",
    "\\frac{d^2z_i}{dt^2} &= -G \\sum_{i\\ne j}^N \\frac {m_j (z_i-z_j)}{\\left[{(x_i-x_j)^2+(y_i-y_j)^2+(z_i-z_j)^2}\\right]^\\frac 32} \n",
    "\\end{aligned}\n",
    "\\right. \\qquad \\qquad \\rightarrow i = 1..N\n",
    "$$\n",
    "\n",
    "To build this system of equations we can use heyoka built-in ``make_nbody_sys`` which will implement for us the equations of motion above. Our main concern is, thus, to generate sets of initial conditions that are compatible with the Earth-based astronomical observations made and simulate a bunch of them in parallel.\n",
    "\n",
    "NOTE: We will not use in this notebook *heyoka.py*'s vectorization capabilities and we will, instead, only parallelise using multiple threads.\n",
    "\n",
    "NOTE: Thread parallelism is possible as the *heyoka.py* Taylor integrator releases the python GIL.\n",
    "\n",
    "Let us begin with importing the needed dependencies:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# core imports\n",
    "import heyoka as hey\n",
    "import numpy as np\n",
    "import pykep as pk\n",
    "\n",
    "# plots\n",
    "import matplotlib.pyplot as plt\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "\n",
    "# misc\n",
    "from copy import deepcopy\n",
    "from multiprocessing.pool import ThreadPool\n",
    "from scipy.optimize import newton"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The first thing one must do is to collect the physical information on the system. For this purpose we refer to the paper from [Agol et al.](https://arxiv.org/pdf/2010.01074.pdf) and we collect and store the various observations for the Trappist system. We indicate with a small ``s`` the measurement error:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Cavendish constant (kg m^3/s^2)\n",
    "G = 6.67430E-11\n",
    "# Sun_mass (kg)\n",
    "SM = 1.989E30\n",
    "# Earth mass (kg)\n",
    "EM = 5.972E24\n",
    "# Mass of the Trappist-1 star\n",
    "MS = 0.0898 * SM\n",
    "MSs = 0.0023\n",
    "# Starting epoch of the simulation\n",
    "t_start = 7257.93115525 * pk.DAY2SEC\n",
    "# Masses of the Earth sized planets \n",
    "mu =  np.array([1.3771,1.3105,0.3885,0.6932,1.0411,1.3238,0.3261])\n",
    "mus = np.array([0.0593,0.0453,0.0074,0.0128,0.0155,0.0171,0.0186])\n",
    "# Orbital parameters for the Earth sized planets \n",
    "P = np.array([1.510826, 2.421937, 4.049219, 6.101013, 9.207540,12.352446,18.772866]) * pk.DAY2SEC\n",
    "Ps = np.array([0.000006,0.000018,0.000026,0.000035,0.000032,0.000054,0.000214]) * pk.DAY2SEC\n",
    "t0 = np.array([7257.55044,7258.58728,7257.06768,7257.82771,7257.07426,7257.71462,7249.60676]) * pk.DAY2SEC\n",
    "t0s = np.array([0.00015,0.00027,0.00067,0.00041,0.00085,0.00103,0.00272]) * pk.DAY2SEC\n",
    "ecosw = np.array([-0.00215, 0.00055,-0.00496, 0.00433,-0.00840, 0.00380,-0.00365])\n",
    "ecosws =  np.array([0.00332,0.00232,0.00186,0.00149,0.00130,0.00112,0.00077])\n",
    "esinw = np.array([ 0.00217, 0.00001, 0.00267,-0.00461,-0.00051, 0.00128,-0.00002])\n",
    "esinws = np.array([0.00244,0.00171,0.00112,0.00087,0.00087,0.00070,0.00044])\n",
    "\n",
    "# We put everything in a dictionary for convenience\n",
    "data = dict()\n",
    "data[\"MS\"] = MS; data[\"MSs\"] = MSs; data[\"mu\"] = mu; data[\"mus\"] = mus; data[\"P\"] = P; data[\"Ps\"] = Ps; \n",
    "data[\"t0\"] = t0; data[\"t0s\"] = t0s; data[\"t_start\"] = t_start; data[\"ecosw\"] = ecosw; data[\"ecosws\"] = ecosws; \n",
    "data[\"esinw\"] = esinw; data[\"esinws\"] = esinws; data[\"G\"] = G; data[\"m_earth\"] = EM; data[\"m_sun\"] = SM"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can now generate plausible Trappist systems having physical properties that are compatible with the astronomical observation, we thus define a ``trappist_generator`` that returns the mass and position of all bodies in the Trappist-1 system (star and planets). Since we are at it we make the generator able to generate ``N`` plausible systems."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def trappist_generator(N, trappist_data):\n",
    "    G, m_earth, m_sun = data[\"G\"], data[\"m_earth\"], data[\"m_sun\"]\n",
    "    retval_ic = []\n",
    "    retval_m = []\n",
    "    \n",
    "   \n",
    "    for i in range(N):\n",
    "        # First we generate the stellar mass\n",
    "        m_star = data[\"MS\"] + data[\"MSs\"] * (np.random.random()*2-1)\n",
    "\n",
    "        # Then we generate masses for the planets\n",
    "        m_pl = (data[\"mu\"] + data[\"mus\"] * (np.random.random()*2-1))\n",
    "        m_pl = m_pl * m_earth * m_star / (m_sun * 0.09)\n",
    "\n",
    "        # And compute the Jacobi masses \"The Jacobi mass of planet i \n",
    "        # includes also the masses of all objects with a smaller \n",
    "        # semi-major axis.\"\n",
    "        m_jacobi = np.cumsum(m_pl)\n",
    "\n",
    "        # Then we generate the periods P\n",
    "        P_pl = data[\"P\"] + data[\"Ps\"] * (np.random.random()*2-1)\n",
    "\n",
    "        # And compute the semi-major axes from them\n",
    "        a_pl = (P_pl / 2. / np.pi)**2 * G * (m_jacobi + m_star)\n",
    "        a_pl = a_pl**(1./3.)\n",
    "        #a_pl = a_pl  * (1 + pert*(np.random.random(7)*2-1))\n",
    "        # Then we generate the ecos, esin \n",
    "        ecosw = data[\"ecosw\"] + data[\"ecosws\"] * (np.random.random()*2-1) \n",
    "        esinw = data[\"esinw\"] + data[\"esinws\"] * (np.random.random()*2-1) \n",
    "\n",
    "        # And compute eccentricites and argument of peristars\n",
    "        e_pl = np.sqrt(ecosw**2 + esinw**2)\n",
    "        w_pl = np.arctan2(esinw, ecosw)\n",
    "        #e_pl = e_pl * (1 + pert*(np.random.random(7)*2-1))\n",
    "        #w_pl = w_pl * (1 + pert*(np.random.random(7)*2-1))\n",
    "\n",
    "        # And compute the mean anomalies at transit\n",
    "        ni_pl_t = np.pi/2 - w_pl\n",
    "        E_pl_t = np.tan(ni_pl_t/2) * np.sqrt((1 - e_pl)/(1 + e_pl))\n",
    "        E_pl_t = np.arctan(E_pl_t)\n",
    "        E_pl_t = E_pl_t * 2\n",
    "        M_pl_t = E_pl_t - E_pl_t * np.sin(E_pl_t)\n",
    "\n",
    "        # And we set inclinations and RAAN accordingly\n",
    "        RAAN_pl = np.zeros(7)\n",
    "        incl_pl = np.ones(7) * np.pi/2\n",
    "        #incl_pl = incl_pl * (1 + pert*(np.random.random(7)*2-1))\n",
    "\n",
    "        # Then we generate the t0\n",
    "        t0_pl = data[\"t0\"] + data[\"t0s\"] * (np.random.random()*2-1) \n",
    "\n",
    "        # And we compute the mean anomalies\n",
    "        M_pl = M_pl_t - ((t0_pl - data[\"t_start\"]) * np.pi * 2) / P_pl\n",
    "\n",
    "\n",
    "        # With all of the orbital parameters defined we can instantiate the ICs\n",
    "        ic_tr = [0,0,0,0,0,0]\n",
    "        for j in range(7):\n",
    "            # Newton method to find E from M\n",
    "            E = newton(lambda E, e, M: E-e*np.sin(E) - M, M_pl[j] + e_pl[j]*np.cos(M_pl[j]), args = (e_pl[j], M_pl[j]))\n",
    "            r,v = pk.par2ic([a_pl[j], e_pl[j], incl_pl[j], RAAN_pl[j], w_pl[j], E], G * m_star)\n",
    "            ic_tr = ic_tr + list(r) + list(v)\n",
    "        ic_tr = np.array(ic_tr)\n",
    "\n",
    "        # Assemble the return masses into one \n",
    "        m_tr = [m_star] + list(m_pl)\n",
    "        m_tr = np.array(m_tr)\n",
    "\n",
    "        # And place the star so that the COM is at the origin\n",
    "        for j in range(6):\n",
    "            ic_tr[0+j] = - sum(ic_tr[6+j::6]*(m_tr[1:] / m_tr[0])) \n",
    "            \n",
    "        retval_ic.append(ic_tr)\n",
    "        retval_m.append(m_tr)\n",
    "    return retval_m, retval_ic\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "and we have a first quick look at the resulting orbits of one random instance:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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wu0qVVEJNrnxVzvxV3cSqHbir3VCSEVj0mEuTA63soenyIY84kQiAS5Eb1EVlUC9K9xSLGvHX96BGlAA0CWbMOTYDn0kYMyxoUs1n/ATqlRVJdjiJVDd+Z/ArnWi+sP/bhqjDkNeAsaBdsxFKZgGJcrcA3GikgAX4nhRAwq+Kgf+g50E6lwE6pwEmzxHfqM0Rt2XQv3QR7at365BVwMKwXYvgXo3gZrDge1E9QbDT9BrMebaMA6wh0M7344+3XLC3+QIcYgEuBCxpAZCBBrcBOpc+Gudh4LdheoLhZ+gAX2aBUOWFV2yCV2iCV2SEV2iEW2iKfzYRwP+cECH2nwE27786CXY5kPp9P/nyVoNhhwbxryEcGAPSMCQZZVT44Q4OglwIfoaVVUJtfmOtNIDdS4CjW5CHX5Uf+i/nq8x64+E+n8C/lC4W/Vo9NpwN7Nei0avQaPTojFow+Go0/zPFq2qqhBUUHwhVP/hxxDqoUfly4/eIME23zcHNIBWgy7ZhD7ZhC7FjD7l0GOGBWNOgux+JkT3SIALEU8UX5BQh5+Qw3fo8cuf+wg5/OHg7M5vqU5zKOTD4Y5e+6XQDnW9rMMBfTiYU8zoUkyHHs3oEo3S/S1E9EiAC9HfqCEVxRkOd8UbRA0qqEEFguqRz9WgihpSwpPqQof+fOR5Cui1aE06NEYdGpPuP58bD3+uRWPSozVq0Rz+mkEra9+FOH4kwIUQQog49I0BLgNRQgghRBySABdCCCHikAS4EEIIEYckwIUQQog4JAEuhBBCxCEJcCGEECIOSYALIYQQcUgCXAghhIhDEuBCCCFEHJIAF0IIIeKQBLgQQggRhyTAhRBCiDgkAS6EEELEIQlwIYQQIg5JgAshhBBxSAJcCCGEiEMS4EIIIUQckgAXQggh4pAEuBBCCBGHJMCFEEKIOCQBLoQQQsQhCXAhhBAiDkmACyGEEHFIAlwIIcT/t1/HJgDAMBDECHj/mTNCSGM4kNpv3B0mSMABIEjAASBIwAEgSMABIEjAASBIwAEgSMABIEjAASBIwAEgSMABIEjAASBIwAEgSMABIEjAASBIwAEgSMABIEjAASBIwAEgSMABIEjAASBIwAEgSMABIEjAASBIwAEgSMABIEjAASBIwAEgSMABIEjAASBIwAEgSMABIEjAASBIwAEgSMABIEjAASBIwAEgSMABIEjAASBIwAEgSMABIEjAASBIwAEgSMABIEjAASBIwAEgSMABIEjAASBIwAEgSMABIEjAASBIwAEgSMABIEjAASBIwAEgSMABIEjAASBIwAEgSMABIEjAASBIwAEgSMABIEjAASBIwAEgSMABIEjAASBIwAEgSMABIEjAASBIwAEgSMABIEjAASBIwAEgSMABIEjAASBIwAEgSMABIEjAASBIwAEgSMABIEjAASBIwAEgSMABIEjAASBIwAEgSMABIEjAASBIwAEgSMABIEjAASBIwAEgSMABIEjAASBIwAEgSMABIEjAASBIwAEgSMABIEjAASBIwAEgSMABIEjAASBIwAEgSMABIEjAASBIwAEgSMABIEjAASBIwAEgSMABIEjAASBIwAEgSMABIEjAASBIwAEgSMABIEjAASBIwAEgSMABIEjAASBIwAEgSMABIEjAASBIwAEgSMABIEjAASBoHvtZuQIA+OIDB4AgAQeAIAEHgCABB4AgAQeAIAEHgKALAF2V/dWHrSUAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 504x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plots the trappist system\n",
    "def plot_trappist(state, mu, axes = None):\n",
    "    letter = [\"s\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]\n",
    "    colors = [\"y\", \"C0\", \"C1\", \"C2\", \"C3\", \"C4\", \"C5\", \"C6\", \"C7\"]\n",
    "    if axes is None:\n",
    "        fig = plt.figure(figsize=(7,7))\n",
    "        axes = fig.add_subplot(111, projection='3d', aspect='auto')\n",
    "    for i in range(1,8):\n",
    "        el = pk.ic2par(state[i*6:3+i*6], state[3+i*6:6+i*6], mu)\n",
    "        pla = pk.planet.keplerian(pk.epoch(0), el, mu, 1., 1., 1. , \"Trappist-1\"+letter[i])\n",
    "        pk.orbit_plots.plot_planet(pla, axes=axes, color=colors[i])\n",
    "    plt.axis('off')\n",
    "    plt.tight_layout()\n",
    "    axes.view_init(elev=0., azim=90.)\n",
    "    axes.scatter(0,0,0,s=40,c='y')\n",
    "    return axes\n",
    "\n",
    "masses, state = trappist_generator(1, data)\n",
    "plot_trappist(state[0], masses[0][0]*G);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We are now ready to define the details of the experiment which will simulate in parallel a number of plausible Trappist-1 systems. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of final files that will be generated: 153\n"
     ]
    }
   ],
   "source": [
    "# Number of parallel processes (i.e. set this to the number of your CPUs).\n",
    "nproc = 3\n",
    "# Number of instances of the problem (i.e. plausible Trappist-1 systems we want to generate). \n",
    "# This should be equal or larger than the number of parallel processes.\n",
    "ninst = 3\n",
    "# Final integration time in yr. (i.e. for 10Myr use 10000000)\n",
    "final_time_yr = 1000\n",
    "# N_log number of logged points (uniformly distributed over the integration time)\n",
    "N_log=50\n",
    "# Linear schedule\n",
    "times = np.linspace(1,final_time_yr, N_log)\n",
    "\n",
    "print(\"Number of final files that will be generated: {:d}\".format(N_log*ninst+ninst))\n",
    "# We generate the various trappist systems\n",
    "m, ic = trappist_generator(ninst, data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We define the code that will run in each separate thread. Since this type of simulation may also take days (e.g. when we look at 10Myr evolutions) we use files to log the results and return data from the various threads:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# This will simulate, monitor and log the i-th initial condition\n",
    "def runner(i):\n",
    "    # Generates the EOMs\n",
    "    ode_sys = hey.make_nbody_sys(8, Gconst = G, masses = m[i])\n",
    "    # Generates the Taylor integrator\n",
    "    ta = hey.taylor_adaptive(ode_sys, ic[i], high_accuracy=True, tol=1e-18, compact_mode=False)\n",
    "    \n",
    "    def data_saver(j, state):           \n",
    "            np.save('trappist1_{}_{:05d}.npy'.format(i,j), state)\n",
    "    # Its good practice to put this in a try catch block, even though it should not be necessary\n",
    "    try:\n",
    "        np.save('trappist1_m_{}.npy'.format(i), m[i])\n",
    "        data_saver(0, ic[i])\n",
    "        for j in range(0,N_log):\n",
    "            oc, _, _, nsteps = ta.propagate_until(times[j] * 365.25 * pk.DAY2SEC)\n",
    "            data_saver(j+1, ta.state)\n",
    "            if oc != hey.taylor_outcome.time_limit:\n",
    "                break\n",
    "    except BaseException as e:\n",
    "        print(\"Exception caught in thread. The full error message:\\n{}\".format(str(e)), flush=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we run the various simulations. Note that it is here that the Taylor adaptive integrator will be compiled by LLVM into efficient code, and thus each runner will take some time before starting. \n",
    "\n",
    "Note that depending to the parameters set for the experiment and your hardware the cell below may run for seconds, days or weeks writing on the files the partial result of the simulation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "with ThreadPool(processes=nproc) as pool:\n",
    "    pool.map(runner, range(ninst))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "At the end and during the execution of the above cell, files will be created logging the system state and its physical parameters. In particular there will be ``ninst`` files (e.g. ``trappist1_m_3.npy``) containing the system masses and ``ninst * N_log`` files (e.g. ``trappist1_3_00001.npy``) containing the system state at the logged points. These files can be read and used to determine the system stability using a number of helper functions.\n",
    "\n",
    "To load the state history for the i-th generated system up to ``N`` files:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def load_evolution(i, N):\n",
    "    state = []\n",
    "    for j in range(N+1):\n",
    "        try:\n",
    "            tmp = np.load('trappist1_{}_{:05d}.npy'.format(i,j))\n",
    "            state.append(tmp)\n",
    "        except FileNotFoundError:\n",
    "            pass\n",
    "    return np.array(state)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To load the masses of the i-th generated system:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def load_masses(sim_id):\n",
    "    return np.load('trappist1_m_{}.npy'.format(sim_id))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To compute the orbital parameters evolution for the ``pl_id`` planet from the states returned by ``load_evolution``:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def compute_planet_evolution(pl_id, states, m_star):\n",
    "    data = states[:, 0+6*pl_id:6+6*pl_id]\n",
    "    retval = []\n",
    "    for d in data:\n",
    "        retval.append(pk.ic2par(d[:3],d[3:6], G * m_star))\n",
    "    return np.array(retval)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To determine if the system evolution is so far stable, by detecting big changes in the system semi-major axes:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def is_stable(states, m_star):\n",
    "    for pl_id in range(7):\n",
    "        params = compute_planet_evolution(pl_id+1, states, m_star)\n",
    "        std = np.std(params[:,0]) / pk.AU\n",
    "        if std > 1e-2:\n",
    "            return False\n",
    "        largest_sma = np.max(params[:,0])\n",
    "        smallest_sma = np.min(params[:,0])\n",
    "        if np.abs(largest_sma-smallest_sma) / pk.AU > 1e-2:\n",
    "            return False\n",
    "    return True\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "... and finally to compute the system energy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "def kinetic_energy(state, masses):\n",
    "    K = 0;\n",
    "    for i in range(8):\n",
    "        v = state[3 + i*6 : 6 + i*6]\n",
    "        K += np.sum(v*v) * masses[i]\n",
    "    return K * 0.5\n",
    "\n",
    "def potential_energy(state, masses):\n",
    "    U = 0.;\n",
    "    for i in range(8):\n",
    "        ri = state[i*6 : 3 + i*6]\n",
    "        for j in range(8):\n",
    "            if i>=j: \n",
    "                continue\n",
    "            else:\n",
    "                rj = state[j*6 : 3 + j*6]\n",
    "                rij = ri-rj\n",
    "                U += (masses[i] * masses[j]) /np.linalg.norm(rij)\n",
    "    return - G * U\n",
    "                \n",
    "def energy(state, masses):\n",
    "    return kinetic_energy(state, masses) + potential_energy(state, masses)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let us then load the simulation result from the files produced, relative to the first system:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "sim_id = 0\n",
    "states = load_evolution(sim_id,N_log)\n",
    "masses = load_masses(sim_id)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "and plot, for example, the semi-major axis of the seven planets "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "n = len(states)\n",
    "times = np.linspace(1, final_time_yr, N_log+1)\n",
    "\n",
    "for i in range(7):\n",
    "    params = compute_planet_evolution(i+1, states, masses[0])\n",
    "    plt.plot(times, params[:,0])\n",
    "plt.xlabel(\"Time (years)\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let us also look at the energy conservation and plot it along the simulation, since we only simulated 1000 years in this example, there is not much we can see, but for long term simulation we would see that the Brouwer's law is achieved for the error growth:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Error on the energy\n",
    "DE = []\n",
    "for i in range(1, len(states)):\n",
    "    DE.append(-np.abs((energy(states[i], masses) - energy(states[0], masses))) / energy(states[i], masses))\n",
    "fig = plt.figure(figsize=(6,5))\n",
    "times = np.linspace(1, final_time_yr, N_log)\n",
    "plt.loglog(times, DE, alpha=0.5, c='gray', marker='.');\n",
    "\n",
    "plt.ylabel(\"Relative energy error\");\n",
    "plt.xlabel(\"Time (years)\");"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
