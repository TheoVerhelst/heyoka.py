{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "modular-friday",
   "metadata": {},
   "source": [
    "# Event detection\n",
    "\n",
    "When integrating systems of ODEs, the need often arises to detect the occurrence of specific\n",
    "conditions (or *events*) in the state of the system. Many real systems, for instance, are described by equations\n",
    "that change discontinuously in response to particular conditions\n",
    "(e.g., a spacecraft entering the cone of shadow of a planet,\n",
    "or a thermostat switching on once the temperature reaches a certain level). In other situations,\n",
    "detection of specific system states may suffice (e.g., in the computation of\n",
    "[Poincar√© sections](https://en.wikipedia.org/wiki/Poincar%C3%A9_map)).\n",
    "\n",
    "An event in a system of ODEs can be defined by an *event equation* of the form \n",
    "\n",
    "$$\n",
    "g\\left( t, \\boldsymbol{x} \\left( t \\right) \\right) = 0,\n",
    "$$\n",
    "\n",
    "where, as usual, $t$ is the independent variable (time) and $\\boldsymbol{x} \\left( t \\right)$ the state vector of the system.\n",
    "As a concrete example, the collision between two spheres of radius 1 moving in a three-dimensional space can be described\n",
    "by the event equation\n",
    "\n",
    "$$\n",
    "\\left( x_1 - x_0 \\right)^2 + \\left( y_1 - y_0 \\right)^2 + \\left( z_1 - z_0 \\right)^2 - 4 = 0,\n",
    "$$\n",
    "\n",
    "where $\\left( x_0, y_0, z_0 \\right)$ and $\\left( x_1, y_1, z_1 \\right)$ are the Cartesian coordinates\n",
    "of the spheres' centres.\n",
    "\n",
    "heyoka.py features a flexible and accurate event detection framework in which the expression system\n",
    "can be used to formulate arbitrary event equations. The event equations are then added to the ODE system and\n",
    "integrated together with the other equations, so that, at every timestep, a Taylor series expansion of the event equations\n",
    "in powers of time is available. Polynomial root finding techniques are then employed\n",
    "on the Taylor series of the event equations to accurately locate the time of occurrence of an event within the timestep.\n",
    "\n",
    "Like many other ODE integration libraries, heyoka.py makes a fundamental distinction between two types of events, *terminal* and *non-terminal*.\n",
    "We will begin with non-terminal events, as they are conceptually simpler.\n",
    "\n",
    "## Non-terminal events\n",
    "\n",
    "Non-terminal events are events that do not modify the state of an ODE system. That is, the occurrence of a non-terminal event does not\n",
    "change the system's dynamics and it does not alter the state vector of the system. A typical use of non-terminal events is to detect and log\n",
    "when the system reaches a particular state of interest (e.g., flagging close encounters between celestial bodies, detecting when\n",
    "a velocity or coordinate is zero, etc.).\n",
    "\n",
    "As an initial example, we will turn to our good ole friend, the simple pendulum:\n",
    "\n",
    "$$\n",
    "\\begin{cases}\n",
    "x^\\prime = v \\\\\n",
    "v^\\prime = -9.8 \\sin x\n",
    "\\end{cases}.\n",
    "$$\n",
    "\n",
    "Our goal will be to detect when the bob reaches the point of maximum amplitude, which corresponds to the angular velocity\n",
    "$v$ going to zero. In other words, out (very simple) event equation is\n",
    "\n",
    "$$\n",
    "v = 0.\n",
    "$$\n",
    "\n",
    "We begin, as usual, with the definition of the symbolic variables:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "tight-filing",
   "metadata": {},
   "outputs": [],
   "source": [
    "import heyoka as hy\n",
    "\n",
    "x, v = hy.make_vars(\"x\", \"v\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "careful-retrieval",
   "metadata": {},
   "source": [
    "Next, we create a list into which we will log the times at which $v = 0$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "pleasant-mambo",
   "metadata": {},
   "outputs": [],
   "source": [
    "zero_vel_times = []"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "unavailable-least",
   "metadata": {},
   "source": [
    "We can now proceed to create a non-terminal event:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "american-recall",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define a callback for the event.\n",
    "def cb(ta, time):\n",
    "    # Compute the state of the system when the\n",
    "    # event triggered and print the value of x.\n",
    "    ta.update_d_output(time)\n",
    "    print(\"Value of x when v is zero: {}\".format(ta.d_output[0]))\n",
    "    \n",
    "    # Add the event time to zero_vel_times.\n",
    "    zero_vel_times.append(time)\n",
    "\n",
    "ev = hy.nt_event(\n",
    "        # The left-hand side of the event equation\n",
    "        v,\n",
    "        # The callback.\n",
    "        callback = cb)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "acquired-remove",
   "metadata": {},
   "source": [
    "Non-terminal events are represented in heyoka.py by the ``nt_event`` class. The first mandatory argument for the construction of a non-terminal event is the left-hand\n",
    "side of the event equation, which in this case is simply $v$.\n",
    "The second mandatory construction argument is a callback function that will be invoked when the event is detected.\n",
    "The callback function can be a lambda, a regular function, or a function object - the only requirement is that the\n",
    "callback is a callable object. The callback will be invoked with a reference to the integrator object as first argument, \n",
    "and the absolute time at which the event was detected as second argument.\n",
    "\n",
    "Because non-terminal event detection is performed at the end of an integration step,\n",
    "when the callback is invoked the state and time of the integrator object are those *at the end* of the integration\n",
    "step in which the event was detected. Note that when integrating an ODE system with events, the ``taylor_adaptive``\n",
    "class ensures that the Taylor coefficients are always kept up to date (as explained in the tutorial about\n",
    "dense output), and thus in the callback function it is always possible to use the ``update_d_output()``\n",
    "function to compute the dense output at any time within the last timestep that was taken.\n",
    "\n",
    "In this specific case, we perform two actions in the callback ``cb``:\n",
    "\n",
    "- first, we compute the dense output at the event trigger time and print\n",
    "  the value of the ``x`` coordinate,\n",
    "- second, we append to ``zero_vel_times`` the trigger time.\n",
    "\n",
    "We are now ready to create our first event-detecting integrator:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "running-force",
   "metadata": {},
   "outputs": [],
   "source": [
    "ta = hy.taylor_adaptive(\n",
    "    # Definition of the ODE system:\n",
    "    # x' = v\n",
    "    # v' = -9.8 * sin(x)\n",
    "    ((x, v), (v, -9.8 * hy.sin(x))),\n",
    "    # Initial conditions\n",
    "    # for x and v.\n",
    "    [-0.05, 0.],\n",
    "    # Non-terminal events.\n",
    "    nt_events = [ev])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "enclosed-guess",
   "metadata": {},
   "source": [
    "The list of non-terminal events is passed to the constructor of the\n",
    "integrator via the ``nt_events`` keyword argument. Note how we\n",
    "set up the initial conditions so that the bob is at rest at an\n",
    "angle of amplitude $0.05$.\n",
    "\n",
    "Let us now integrate for a few time units and plot the evolution of the system\n",
    "together with the times at which the event triggers:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "sapphire-profit",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Value of x when v is zero: -0.05\n",
      "Value of x when v is zero: 0.049999999999999996\n",
      "Value of x when v is zero: -0.05\n",
      "Value of x when v is zero: 0.05\n",
      "Value of x when v is zero: -0.049999999999999996\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "from matplotlib.pylab import plt\n",
    "plt.rcParams[\"figure.figsize\"] = (12,6)\n",
    "\n",
    "# Construct a time grid from t=0 to t=5.\n",
    "t_grid = np.linspace(0, 5, 1000)\n",
    "\n",
    "# Propagate over the time grid.\n",
    "x_hist = ta.propagate_grid(t_grid)[4][:,0]\n",
    "\n",
    "# Display the time evolution for the x variable.\n",
    "plt.plot(t_grid, x_hist)\n",
    "plt.xlabel(\"Time\")\n",
    "plt.ylabel(\"x\")\n",
    "\n",
    "# Put vertical lines in correspondence of\n",
    "# the detected events.\n",
    "for ev_time in zero_vel_times:\n",
    "    plt.axvline(x = ev_time, linestyle='--', color='gray')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "incident-pursuit",
   "metadata": {},
   "source": [
    "As expected, $v$ is zero at the points of maximum amplitude for the angle,\n",
    "and in these points the absolute value the $x$ angle corresponds to the\n",
    "initial amplitude of $0.05$.\n",
    "\n",
    "Let us now print the event times:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "peaceful-capture",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.0, 1.0037017879400651, 2.0074035758801303, 3.011105363820196, 4.014807151760261]\n"
     ]
    }
   ],
   "source": [
    "print(zero_vel_times)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "realistic-drinking",
   "metadata": {},
   "source": [
    "We can see how the the initial condition $v_0 = 0$ immediately\n",
    "and correctly triggers an event at $t = 0$. Physically, we know that the time\n",
    "interval between the events must be half the period $T$ of the pendulum,\n",
    "which can be computed exactly via elliptic functions. With the specific\n",
    "initial conditions of this example, $T = 2.0074035758801299\\ldots$, and\n",
    "we can see from the event times printed to screen\n",
    "how the event detection system was accurate to machine precision.\n",
    "\n",
    "### Event direction\n",
    "\n",
    "By default, heyoka.py will detect all zeroes of the event equations regardless\n",
    "of the *direction* of the zero crossing (i.e., the value of the time derivative\n",
    "of the event equation at the zero). However, it is sometimes useful to tigger the detection\n",
    "of an event only if its direction is positive or negative. Event direction is represented\n",
    "in heyoka.py by the ``event_direction`` enum, whose values can be\n",
    "\n",
    "- ``event_direction.any`` (the default),\n",
    "- ``event_direction.positive`` (derivative > 0),\n",
    "- ``event_direction.negative`` (derivative < 0).\n",
    "\n",
    "Event direction can be specified upon construction:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "otherwise-stable",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Redefine ev to detect only events\n",
    "# in the positive direction.\n",
    "ev = hy.nt_event(\n",
    "        v, callback = lambda ta, time: zero_vel_times.append(time),\n",
    "        # Specify the direction.\n",
    "        direction = hy.event_direction.positive)\n",
    "\n",
    "# Reset zero_vel_times and the integrator.\n",
    "zero_vel_times.clear()\n",
    "ta = hy.taylor_adaptive(((x, v), (v, -9.8 * hy.sin(x))), [-0.05, 0.], nt_events = [ev])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "written-equivalent",
   "metadata": {},
   "source": [
    "In this specific case, constraining the event direction to be positive is equivalent\n",
    "to detect $v = 0$ only when the pendulum reaches the maximum amplitude on the left.\n",
    "Let us take a look at the plot:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "pleasant-insurance",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Propagate over the time grid.\n",
    "x_hist = ta.propagate_grid(t_grid)[4][:,0]\n",
    "\n",
    "# Display the time evolution for the x variable.\n",
    "plt.plot(t_grid, x_hist)\n",
    "plt.xlabel(\"Time\")\n",
    "plt.ylabel(\"x\")\n",
    "\n",
    "# Put vertical lines in correspondence of\n",
    "# the detected events.\n",
    "for ev_time in zero_vel_times:\n",
    "    plt.axvline(x = ev_time, linestyle='--', color='gray')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "individual-insert",
   "metadata": {},
   "source": [
    "Indeed, the event now triggers only 3 times (instead of 5). Let's take a loot at the event times:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "outside-lightning",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.0, 2.0074035758801303, 4.014807151760261]\n"
     ]
    }
   ],
   "source": [
    "print(zero_vel_times)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "general-network",
   "metadata": {},
   "source": [
    "The times confirm that the event is detected only when $v$ switches from negative to positive, i.e.,\n",
    "at $t=0$, $t=T$ and $t=2T$.\n",
    "\n",
    "### Multiple events\n",
    "\n",
    "When multiple events trigger within the same timestep (or if the same event triggers\n",
    "multiple times), heyoka.py will process the events in chronological order\n",
    "(or reverse chronological order when integrating backwards in time).\n",
    "\n",
    "Let us demonstrate this with another example with the simple pendulum.\n",
    "We will now aim to detect two events defined by the equations:\n",
    "\n",
    "$$\n",
    "\\begin{cases}\n",
    "v = 0 \\\\\n",
    "v^2 - 10^{-12} = 0\n",
    "\\end{cases}.\n",
    "$$\n",
    "\n",
    "In other words, we are looking to determine the time of maximum amplitude ($v = 0$) and\n",
    "the time at which the absolute value of the angular velocity is small but not zero. Because\n",
    "of the closeness of these events, we can expect both events to be detected during the same timestep,\n",
    "with the second event triggering twice.\n",
    "\n",
    "Let's begin by defining the two events:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "coral-reality",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define two close non-terminal events.\n",
    "ev0 = hy.nt_event(v, lambda ta, time: print(\"Event 0 triggering at t={}\".format(time)))\n",
    "ev1 = hy.nt_event(v * v - 1e-12,  lambda ta, time: print(\"Event 1 triggering at t={}\".format(time)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "sealed-lexington",
   "metadata": {},
   "source": [
    "This time the events' callbacks just print the event time to screen, without\n",
    "modifying the ``zero_vel_times`` list.\n",
    "\n",
    "We can then reset the integrator, propagate for a few time units and check the screen output:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "lasting-logging",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Event 0 triggering at t=0.0\n",
      "Event 1 triggering at t=2.0416669147538258e-06\n",
      "Event 1 triggering at t=1.0036997462722441\n",
      "Event 0 triggering at t=1.0037017879400651\n",
      "Event 1 triggering at t=1.0037038296067993\n",
      "Event 1 triggering at t=2.0074015342136557\n",
      "Event 0 triggering at t=2.0074035758801303\n",
      "Event 1 triggering at t=2.0074056175465405\n",
      "Event 1 triggering at t=3.0111033221527115\n",
      "Event 0 triggering at t=3.011105363820196\n",
      "Event 1 triggering at t=3.011107405487484\n",
      "Event 1 triggering at t=4.014805110093445\n",
      "Event 0 triggering at t=4.014807151760261\n",
      "Event 1 triggering at t=4.0148091934271015\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(<taylor_outcome.time_limit: -4294967299>,\n",
       " 0.2025845988791224,\n",
       " 0.21820132298648842,\n",
       " 24)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Reset the integrator.\n",
    "ta = hy.taylor_adaptive(((x, v), (v, -9.8 * hy.sin(x))), [-0.05, 0.], nt_events = [ev0, ev1])\n",
    "\n",
    "# Propagate for a few time units.\n",
    "ta.propagate_until(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "usual-transcription",
   "metadata": {},
   "source": [
    "Note how the events are indeed processed in chronological order, and how the event detection system is able to\n",
    "successfully recognize the second event triggering twice in close succession.\n",
    "\n",
    "## Terminal events\n",
    "\n",
    "The fundamental characteristic of terminal events is that, in contrast to non-terminal events,\n",
    "they alter the dynamics and/or the state of the system. A typical example of a terminal event is the\n",
    "[elastic collision](https://en.wikipedia.org/wiki/Elastic_collision) of\n",
    "two rigid bodies, which instantaneously and discontinuously changes the bodies' velocity vectors.\n",
    "Another example is the switching on of a spacecraft engine, which alters the differential\n",
    "equations governing the dynamics of the spacecraft.\n",
    "\n",
    "Terminal events are represented in heyoka.py by the ``t_event`` class. Similarly to\n",
    "the ``nt_event`` class, the construction of a ``t_event`` requires\n",
    "at the very least the expression corresponding to the left-hand side of the event equation.\n",
    "A number of additional optional keyword arguments can be passed to customise the behaviour\n",
    "of a terminal event:\n",
    "\n",
    "- ``callback``: a callback function that will be called when the event triggers. Note that,\n",
    "  for terminal events, the presence of a callback is optional (whereas it is mandatory for\n",
    "  non-terminal events);\n",
    "- ``cooldown``: a floating-point value representing the cooldown time for the terminal event\n",
    "  (see below for an explanation);\n",
    "- ``direction``: a value of the ``event_direction`` enum which, like for non-terminal\n",
    "  events, can be used to specify that the event should be detected only for a specific direction\n",
    "  of the zero crossing.\n",
    "\n",
    "It is important to understand how heyoka.py reacts to terminal events. At every integration timestep, heyoka.py\n",
    "performs event detection for both terminal and non-terminal events. If one or more terminal events\n",
    "are detected, heyoka.py will sort the detected terminal events by time and will select the first\n",
    "terminal event triggering in chronological order (or reverse chronological order when integrating\n",
    "backwards in time). All the other terminal events and all the non-terminal events triggering *after*\n",
    "the first terminal event are discarded. heyoka.py then propagates the state of the system up to the\n",
    "trigger time of the first terminal event, executes the callbacks of the surviving non-terminal events\n",
    "in chronological order and finally executes the callback of the first terminal event (if provided).\n",
    "\n",
    "In order to illustrate the use of terminal events, we will consider a damped pendulum with a small twist:\n",
    "the friction coefficient $\\alpha$ switches discontinuously between 1 and 0 every time the angular\n",
    "velocity $v$ is zero. The ODE system reads:\n",
    "\n",
    "$$\n",
    "\\begin{cases}\n",
    "x^\\prime = v \\\\\n",
    "v^\\prime = - 9.8\\sin x - \\alpha v\n",
    "\\end{cases},\n",
    "$$\n",
    "\n",
    "and the terminal event equation is, again, simply $v = 0$.\n",
    "\n",
    "Let us begin with the definition of the terminal event:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "south-april",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Clear up zero_vel_times.\n",
    "zero_vel_times.clear()\n",
    "\n",
    "# Callback for the terminal event.\n",
    "def t_cb(ta, mr):\n",
    "    # NOTE: the value of the drag coefficient\n",
    "    # is stored as the first (and only) runtime parameter\n",
    "    # of the integrator.\n",
    "    if ta.pars[0] == 0:\n",
    "        ta.pars[0] = 1\n",
    "    else:\n",
    "        ta.pars[0] = 0\n",
    "\n",
    "    # Append the event time to zero_vel_times.\n",
    "    zero_vel_times.append(ta.time)\n",
    "\n",
    "    # Do not stop the integration.\n",
    "    return True\n",
    "\n",
    "# Define a terminal event that turns air drag on/off\n",
    "# whenever the velocity goes to zero.\n",
    "t_ev = hy.t_event(\n",
    "        # The event equation.\n",
    "        v,\n",
    "        # The callback.\n",
    "        callback = t_cb)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "controversial-quilt",
   "metadata": {},
   "source": [
    "Like in the case of non-terminal events, we specified as first construction argument\n",
    "the event equation. As second argument we passed a callback function that will be invoked\n",
    "when the event triggers.\n",
    "\n",
    "As you can see from the code snippet, the callback signature for terminal events\n",
    "differs from the signature non-terminal callbacks. Specifically:\n",
    "\n",
    "- the event trigger time is not passed to the callback. This is not necessary\n",
    "  because, when a terminal event triggers, the state of the integrator is propagated\n",
    "  up to the event, and thus the trigger time is the current integrator time\n",
    "  (which can be fetched via ``ta.time``);\n",
    "- there is an additional boolean function argument, here called ``mr``. We will be ignoring\n",
    "  this extra argument for the moment, its meaning will be clarified in the\n",
    "  cooldown section below;\n",
    "- whereas non-terminal event callbacks do not return anything, terminal event callbacks\n",
    "  are required to return ``True`` or ``False``. If the callback returns ``False`` the integration\n",
    "  will always be stopped after the execution of the callback. Otherwise, when using the\n",
    "  ``propagate_*()`` family of functions, the integration will resume after the execution\n",
    "  of the callback.\n",
    "\n",
    "Note that, for the purpose of stopping the integration, an event *without* a callback is considered\n",
    "equivalent to an event whose callback returns ``False``.\n",
    "We thus refer to terminal events without a callback or whose callback returns ``False``\n",
    "as *stopping* terminal events, because their occurrence will prevent the integrator from continuing\n",
    "without user intervention.\n",
    "\n",
    "In this example, within the callback code we alter the value of the drag coefficient $\\alpha$\n",
    "(which is stored within the runtime parameters of the integrator): if $\\alpha$\n",
    "is currently 0, we set it to 1, otherwise we set it to 0.\n",
    "\n",
    "Let us proceed to the construction of the integrator:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "interesting-fault",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Construct the damped pendulum integrator.\n",
    "ta = hy.taylor_adaptive([(x, v),\n",
    "                        # NOTE: alpha is represented as\n",
    "                        # the first (and only) runtime\n",
    "                        # parameter: par[0].\n",
    "                        (v, -9.8 * hy.sin(x) - hy.par[0] * v)],\n",
    "                        [0.05, 0.025],\n",
    "                        # The list of terminal events.\n",
    "                        t_events = [t_ev])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fuzzy-assault",
   "metadata": {},
   "source": [
    "Similarly to the non-terminal events case, the list of terminal events\n",
    "is specified when constructing an integrator via the ``t_events`` keyword argument.\n",
    "\n",
    "If a terminal event triggers within the single-step functions (``step()`` and ``step_backward()``),\n",
    "the outcome of the integration will contain the index of the event that triggered. Let us see a simple example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "ordinary-repair",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Event index: 0\n"
     ]
    }
   ],
   "source": [
    "# Propagate step-by-step until the event triggers.\n",
    "oc, h = ta.step()\n",
    "while oc == hy.taylor_outcome.success:\n",
    "    oc, h = ta.step()\n",
    "\n",
    "# Print the outcome to screen.\n",
    "print(\"Event index: {}\".format(int(oc)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "independent-redhead",
   "metadata": {},
   "source": [
    "The screen output confirms that the first (and only) event triggered.\n",
    "\n",
    "Because here we used the single step\n",
    "function, even if the event's callback returned ``True`` the integration was stopped in correpondence of the\n",
    "event. Let us now use the ``propagate_grid()`` function instead, so that the integration resumes after the\n",
    "execution of the callback:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "accomplished-watershed",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Final time: 10.0\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Construct a time grid from the current time to t=10.\n",
    "t_grid = np.linspace(ta.time, 10, 1000)\n",
    "\n",
    "# Propagate over the time grid.\n",
    "x_hist = ta.propagate_grid(t_grid)[4][:,0]\n",
    "\n",
    "# Display the time evolution for the x variable.\n",
    "plt.plot(t_grid, x_hist)\n",
    "plt.xlabel(\"Time\")\n",
    "plt.ylabel(\"x\")\n",
    "\n",
    "# Put vertical lines in correspondence of\n",
    "# the detected events.\n",
    "for ev_time in zero_vel_times:\n",
    "    plt.axvline(x = ev_time, linestyle='--', color='gray')\n",
    "\n",
    "print(\"Final time: {}\".format(ta.time))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "seven-florist",
   "metadata": {},
   "source": [
    "The screen output confirms that indeed the integration continued up to the final time $t = 10$.\n",
    "\n",
    "The plot shows how the event correctly triggered at $v=0$ and how, in the time intervals in which $\\alpha = 1$, the motion of the pendulum was damped by the air drag.\n",
    "\n",
    "### Cooldown\n",
    "\n",
    "One notable complication when restarting an integration that was stopped in correspondence of a terminal event\n",
    "is the risk of immediately re-triggering the same event, which would lead to an endless loop without any progress\n",
    "being made in the integration.\n",
    "\n",
    "In order to avoid this issue, whenever a terminal event occurs the event enters\n",
    "a *cooldown* period. Within the cooldown period, occurrences of the same event are ignored by the event detection\n",
    "system. The length of the cooldown period is, by default, automatically deduced by heyoka.py, but in some cases\n",
    "it might be useful to manually set a custom value. A custom cooldown period can be selected when constructing\n",
    "a terminal event via the ``cooldown`` keyword.\n",
    "\n",
    "When a terminal event triggers and enters the cooldown period, the event detection system will also try to detect\n",
    "the occurrence of multiple roots of the event equation within the cooldown period. If such multiple roots are detected,\n",
    "then the ``mr`` boolean parameter in the terminal event callback will be set to ``True``, so that the user\n",
    "has the possibility to handle such occurrence. Note that an ``mr`` value of ``False`` in the callback does not imply\n",
    "that multiple roots do not exist, just that they were not detected."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
