{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "489ba1ac",
   "metadata": {},
   "source": [
    "# Event detection\n",
    "\n",
    "When integrating systems of ODEs, the need often arises to detect the occurrence of specific\n",
    "conditions (or *events*) in the state of the system. Many real systems, for instance, are described by equations\n",
    "that change discontinuously in response to particular conditions\n",
    "(e.g., a spacecraft entering the cone of shadow of a planet,\n",
    "or a thermostat switching on once the temperature reaches a certain level). In other situations,\n",
    "detection of specific system states may suffice (e.g., in the computation of\n",
    "[Poincar√© sections](https://en.wikipedia.org/wiki/Poincar%C3%A9_map)).\n",
    "\n",
    "An event in a system of ODEs can be defined by an *event equation* of the form \n",
    "\n",
    "$$\n",
    "g\\left( t, \\boldsymbol{x} \\left( t \\right) \\right) = 0,\n",
    "$$\n",
    "\n",
    "where, as usual, $t$ is the independent variable (time) and $\\boldsymbol{x} \\left( t \\right)$ the state vector of the system.\n",
    "As a concrete example, the collision between two spheres of radius 1 moving in a three-dimensional space can be described\n",
    "by the event equation\n",
    "\n",
    "$$\n",
    "\\left( x_1 - x_0 \\right)^2 + \\left( y_1 - y_0 \\right)^2 + \\left( z_1 - z_0 \\right)^2 - 4 = 0,\n",
    "$$\n",
    "\n",
    "where $\\left( x_0, y_0, z_0 \\right)$ and $\\left( x_1, y_1, z_1 \\right)$ are the Cartesian coordinates\n",
    "of the spheres' centres.\n",
    "\n",
    "heyoka.py features a flexible and accurate event detection framework in which the [expression system](<./The expression system.ipynb>)\n",
    "can be used to formulate arbitrary event equations. The event equations are then added to the ODE system and\n",
    "integrated together with the other equations, so that, at every timestep, a Taylor series expansion of the event equations\n",
    "in powers of time is available. Polynomial root finding techniques are then employed\n",
    "on the Taylor series of the event equations to accurately locate the time of occurrence of an event within the timestep.\n",
    "\n",
    "Like many other ODE integration libraries, heyoka.py makes a fundamental distinction between two types of events, *terminal* and *non-terminal*.\n",
    "We will begin with non-terminal events, as they are conceptually simpler.\n",
    "\n",
    "## Non-terminal events\n",
    "\n",
    "Non-terminal events are events that do not modify the state of an ODE system. That is, the occurrence of a non-terminal event does not\n",
    "change the system's dynamics and it does not alter the state vector of the system. A typical use of non-terminal events is to detect and log\n",
    "when the system reaches a particular state of interest (e.g., flagging close encounters between celestial bodies, detecting when\n",
    "a velocity or coordinate is zero, etc.).\n",
    "\n",
    "As an initial example, we will turn to our good ole friend, the simple pendulum:\n",
    "\n",
    "$$\n",
    "\\begin{cases}\n",
    "x^\\prime = v \\\\\n",
    "v^\\prime = -9.8 \\sin x\n",
    "\\end{cases}.\n",
    "$$\n",
    "\n",
    "Our goal will be to detect when the bob reaches the point of maximum amplitude, which corresponds to the angular velocity\n",
    "$v$ going to zero. In other words, out (very simple) event equation is\n",
    "\n",
    "$$\n",
    "v = 0.\n",
    "$$\n",
    "\n",
    "We begin, as usual, with the definition of the symbolic variables:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9b98f7e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "import heyoka as hy\n",
    "\n",
    "x, v = hy.make_vars(\"x\", \"v\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "384fdfe3",
   "metadata": {},
   "source": [
    "Next, we create a list into which we will log the times at which $v = 0$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5c75ac89",
   "metadata": {},
   "outputs": [],
   "source": [
    "zero_vel_times = []"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "89e84aed",
   "metadata": {},
   "source": [
    "We can now proceed to create a non-terminal event:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "796e8baf",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define a callback for the event.\n",
    "def cb(ta, time, d_sgn):\n",
    "    # Compute the state of the system when the\n",
    "    # event triggered and print the value of x.\n",
    "    ta.update_d_output(time)\n",
    "    print(\"Value of x when v is zero: {}\".format(ta.d_output[0]))\n",
    "    \n",
    "    # Add the event time to zero_vel_times.\n",
    "    zero_vel_times.append(time)\n",
    "\n",
    "ev = hy.nt_event(\n",
    "        # The left-hand side of the event equation\n",
    "        v,\n",
    "        # The callback.\n",
    "        callback = cb)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a14dc1b6",
   "metadata": {},
   "source": [
    "Non-terminal events are represented in heyoka.py by the ``nt_event`` class. The first mandatory argument for the construction of a non-terminal event is the left-hand\n",
    "side of the event equation, which in this case is simply $v$.\n",
    "The second mandatory construction argument is a callback function that will be invoked when the event is detected.\n",
    "The callback function can be a lambda, a regular function, or a function object - the only requirement is that the\n",
    "callback is a callable object. The callback will be invoked with a reference to the integrator object as first argument, \n",
    "the absolute time at which the event was detected as second argument, and the sign of the derivative\n",
    "of the event equation at the trigger time as third argument (-1 for negative derivative, 1 for positive derivative and 0 for\n",
    "zero derivative).\n",
    "\n",
    "Because non-terminal event detection is performed at the end of an integration step,\n",
    "when the callback is invoked the state and time of the integrator object are those *at the end* of the integration\n",
    "step in which the event was detected. Note that when integrating an ODE system with events, the ``taylor_adaptive``\n",
    "class ensures that the Taylor coefficients are always kept up to date (as explained in the tutorial about\n",
    "[dense output](<./Dense output.ipynb>)), and thus in the callback function it is always possible to use the ``update_d_output()``\n",
    "function to compute the dense output at any time within the last timestep that was taken.\n",
    "\n",
    "In this example, we perform two actions in the callback ``cb``:\n",
    "\n",
    "- first, we compute the dense output at the event trigger time and print\n",
    "  the value of the ``x`` coordinate,\n",
    "- second, we append to ``zero_vel_times`` the trigger time.\n",
    "\n",
    "We are now ready to create our first event-detecting integrator:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3fbec49b",
   "metadata": {},
   "outputs": [],
   "source": [
    "ta = hy.taylor_adaptive(\n",
    "    # Definition of the ODE system:\n",
    "    # x' = v\n",
    "    # v' = -9.8 * sin(x)\n",
    "    ((x, v), (v, -9.8 * hy.sin(x))),\n",
    "    # Initial conditions\n",
    "    # for x and v.\n",
    "    [-0.05, 0.],\n",
    "    # Non-terminal events.\n",
    "    nt_events = [ev])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19f41646",
   "metadata": {},
   "source": [
    "The list of non-terminal events is passed to the constructor of the\n",
    "integrator via the ``nt_events`` keyword argument. Note how we\n",
    "set up the initial conditions so that the bob is at rest at an\n",
    "angle of amplitude $0.05$.\n",
    "\n",
    "Let us now integrate for a few time units and plot the evolution of the system\n",
    "together with the times at which the event triggers:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "abfe3ecf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Value of x when v is zero: -0.05\n",
      "Value of x when v is zero: 0.049999999999999996\n",
      "Value of x when v is zero: -0.05\n",
      "Value of x when v is zero: 0.05\n",
      "Value of x when v is zero: -0.049999999999999996\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "from matplotlib.pylab import plt\n",
    "plt.rcParams[\"figure.figsize\"] = (12,6)\n",
    "\n",
    "# Construct a time grid from t=0 to t=5.\n",
    "t_grid = np.linspace(0, 5, 1000)\n",
    "\n",
    "# Propagate over the time grid.\n",
    "x_hist = ta.propagate_grid(t_grid)[4][:,0]\n",
    "\n",
    "# Display the time evolution for the x variable.\n",
    "plt.plot(t_grid, x_hist)\n",
    "plt.xlabel(\"Time\")\n",
    "plt.ylabel(\"x\")\n",
    "\n",
    "# Put vertical lines in correspondence of\n",
    "# the detected events.\n",
    "for ev_time in zero_vel_times:\n",
    "    plt.axvline(x = ev_time, linestyle='--', color='gray')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e9e88e5",
   "metadata": {},
   "source": [
    "As expected, $v$ is zero at the points of maximum amplitude for the angle,\n",
    "and in these points the absolute value the $x$ angle corresponds to the\n",
    "initial amplitude of $0.05$.\n",
    "\n",
    "Let us now print the event times:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3cd54c77",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.0, 1.003701787940065, 2.00740357588013, 3.011105363820195, 4.01480715176026]\n"
     ]
    }
   ],
   "source": [
    "print(zero_vel_times)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8765f7ce",
   "metadata": {},
   "source": [
    "We can see how the the initial condition $v_0 = 0$ immediately\n",
    "and correctly triggers an event at $t = 0$. Physically, we know that the time\n",
    "interval between the events must be half the period $T$ of the pendulum,\n",
    "which can be computed exactly via elliptic functions. With the specific\n",
    "initial conditions of this example, $T = 2.0074035758801299\\ldots$, and\n",
    "we can see from the event times printed to screen\n",
    "how the event detection system was accurate to machine precision.\n",
    "\n",
    "### Event direction\n",
    "\n",
    "By default, heyoka.py will detect all zeroes of the event equations regardless\n",
    "of the *direction* of the zero crossing (i.e., the value of the time derivative\n",
    "of the event equation at the zero). However, it is sometimes useful to trigger the detection\n",
    "of an event only if its direction is positive or negative. Event direction is represented\n",
    "in heyoka.py by the ``event_direction`` enum, whose values can be\n",
    "\n",
    "- ``event_direction.any`` (the default),\n",
    "- ``event_direction.positive`` (derivative > 0),\n",
    "- ``event_direction.negative`` (derivative < 0).\n",
    "\n",
    "Event direction can be specified upon construction:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "14e6e7b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Redefine ev to detect only events\n",
    "# in the positive direction.\n",
    "ev = hy.nt_event(\n",
    "        v, callback = lambda ta, time, d_sgn: zero_vel_times.append(time),\n",
    "        # Specify the direction.\n",
    "        direction = hy.event_direction.positive)\n",
    "\n",
    "# Reset zero_vel_times and the integrator.\n",
    "zero_vel_times.clear()\n",
    "ta = hy.taylor_adaptive(((x, v), (v, -9.8 * hy.sin(x))), [-0.05, 0.], nt_events = [ev])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "93188401",
   "metadata": {},
   "source": [
    "In this specific case, constraining the event direction to be positive is equivalent\n",
    "to detecting $v = 0$ only when the pendulum reaches the maximum amplitude on the left.\n",
    "Let us take a look at the plot:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "fcff6b83",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Propagate over the time grid.\n",
    "x_hist = ta.propagate_grid(t_grid)[4][:,0]\n",
    "\n",
    "# Display the time evolution for the x variable.\n",
    "plt.plot(t_grid, x_hist)\n",
    "plt.xlabel(\"Time\")\n",
    "plt.ylabel(\"x\")\n",
    "\n",
    "# Put vertical lines in correspondence of\n",
    "# the detected events.\n",
    "for ev_time in zero_vel_times:\n",
    "    plt.axvline(x = ev_time, linestyle='--', color='gray')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e57e0720",
   "metadata": {},
   "source": [
    "Indeed, the event now triggers only 3 times (instead of 5). Let's take a loot at the event times:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "bc53abfb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.0, 2.00740357588013, 4.01480715176026]\n"
     ]
    }
   ],
   "source": [
    "print(zero_vel_times)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a83f139",
   "metadata": {},
   "source": [
    "The times confirm that the event is detected only when $v$ switches from negative to positive, i.e.,\n",
    "at $t=0$, $t=T$ and $t=2T$.\n",
    "\n",
    "### Multiple events\n",
    "\n",
    "When multiple events trigger within the same timestep (or if the same event triggers\n",
    "multiple times), heyoka.py will process the events in chronological order\n",
    "(or reverse chronological order when integrating backwards in time).\n",
    "\n",
    "Let us demonstrate this with another example with the simple pendulum.\n",
    "We will now aim to detect two events defined by the equations:\n",
    "\n",
    "$$\n",
    "\\begin{cases}\n",
    "v = 0 \\\\\n",
    "v^2 - 10^{-12} = 0\n",
    "\\end{cases}.\n",
    "$$\n",
    "\n",
    "In other words, we are looking to determine the time of maximum amplitude ($v = 0$) and\n",
    "the time at which the absolute value of the angular velocity is small but not zero. Because\n",
    "of the closeness of these events, we can expect both events to be detected during the same timestep,\n",
    "with the second event triggering twice.\n",
    "\n",
    "Let's begin by defining the two events:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e88f6283",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define two close non-terminal events.\n",
    "ev0 = hy.nt_event(v, lambda ta, time, d_sgn: print(\"Event 0 triggering at t={}\".format(time)))\n",
    "ev1 = hy.nt_event(v * v - 1e-12,  lambda ta, time, d_sgn: print(\"Event 1 triggering at t={}\".format(time)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d15712eb",
   "metadata": {},
   "source": [
    "This time the events' callbacks just print the event time to screen, without\n",
    "modifying the ``zero_vel_times`` list.\n",
    "\n",
    "We can then reset the integrator, propagate for a few time units and check the screen output:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b5ff7697",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Event 0 triggering at t=0.0\n",
      "Event 1 triggering at t=2.0416669147618175e-06\n",
      "Event 1 triggering at t=1.0036997462725616\n",
      "Event 0 triggering at t=1.003701787940065\n",
      "Event 1 triggering at t=1.0037038296081024\n",
      "Event 1 triggering at t=2.0074015342133102\n",
      "Event 0 triggering at t=2.00740357588013\n",
      "Event 1 triggering at t=2.0074056175472714\n",
      "Event 1 triggering at t=3.0111033221532955\n",
      "Event 0 triggering at t=3.011105363820195\n",
      "Event 1 triggering at t=3.0111074054870994\n",
      "Event 1 triggering at t=4.0148051100933335\n",
      "Event 0 triggering at t=4.01480715176026\n",
      "Event 1 triggering at t=4.014809193427186\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(<taylor_outcome.time_limit: -4294967299>,\n",
       " 0.17033435611316083,\n",
       " 0.17602774916423602,\n",
       " 29,\n",
       " None)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Reset the integrator.\n",
    "ta = hy.taylor_adaptive(((x, v), (v, -9.8 * hy.sin(x))), [-0.05, 0.], nt_events = [ev0, ev1])\n",
    "\n",
    "# Propagate for a few time units.\n",
    "ta.propagate_until(5.)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8517d247",
   "metadata": {},
   "source": [
    "Note how the events are indeed processed in chronological order, and how the event detection system is able to\n",
    "successfully recognize the second event triggering twice in close succession.\n",
    "\n",
    "## Terminal events\n",
    "\n",
    "The fundamental characteristic of terminal events is that, in contrast to non-terminal events,\n",
    "they alter the dynamics and/or the state of the system. A typical example of a terminal event is the\n",
    "[elastic collision](https://en.wikipedia.org/wiki/Elastic_collision) of\n",
    "two rigid bodies, which instantaneously and discontinuously changes the bodies' velocity vectors.\n",
    "Another example is the switching on of a spacecraft engine, which alters the differential\n",
    "equations governing the dynamics of the spacecraft.\n",
    "\n",
    "Terminal events are represented in heyoka.py by the ``t_event`` class. Similarly to\n",
    "the ``nt_event`` class, the construction of a ``t_event`` requires\n",
    "at the very least the expression corresponding to the left-hand side of the event equation.\n",
    "A number of additional optional keyword arguments can be passed to customise the behaviour\n",
    "of a terminal event:\n",
    "\n",
    "- ``callback``: a callback function that will be called when the event triggers. Note that,\n",
    "  for terminal events, the presence of a callback is optional (whereas it is mandatory for\n",
    "  non-terminal events);\n",
    "- ``cooldown``: a floating-point value representing the cooldown time for the terminal event\n",
    "  (see below for an explanation);\n",
    "- ``direction``: a value of the ``event_direction`` enum which, like for non-terminal\n",
    "  events, can be used to specify that the event should be detected only for a specific direction\n",
    "  of the zero crossing.\n",
    "\n",
    "It is important to understand how heyoka.py reacts to terminal events. At every integration timestep, heyoka.py\n",
    "performs event detection for both terminal and non-terminal events. If one or more terminal events\n",
    "are detected, heyoka.py will sort the detected terminal events by time and will select the first\n",
    "terminal event triggering in chronological order (or reverse chronological order when integrating\n",
    "backwards in time). All the other terminal events and all the non-terminal events triggering *after*\n",
    "the first terminal event are discarded. heyoka.py then propagates the state of the system up to the\n",
    "trigger time of the first terminal event, executes the callbacks of the surviving non-terminal events\n",
    "in chronological order and finally executes the callback of the first terminal event (if provided).\n",
    "\n",
    "In order to illustrate the use of terminal events, we will consider a damped pendulum with a small twist:\n",
    "the friction coefficient $\\alpha$ switches discontinuously between 1 and 0 every time the angular\n",
    "velocity $v$ is zero. The ODE system reads:\n",
    "\n",
    "$$\n",
    "\\begin{cases}\n",
    "x^\\prime = v \\\\\n",
    "v^\\prime = - 9.8\\sin x - \\alpha v\n",
    "\\end{cases},\n",
    "$$\n",
    "\n",
    "and the terminal event equation is, again, simply $v = 0$.\n",
    "\n",
    "Let us begin with the definition of the terminal event:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "25b73228",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Clear up zero_vel_times.\n",
    "zero_vel_times.clear()\n",
    "\n",
    "# Callback for the terminal event.\n",
    "def t_cb(ta, mr, d_sgn):\n",
    "    # NOTE: the value of the drag coefficient\n",
    "    # is stored as the first (and only) runtime parameter\n",
    "    # of the integrator.\n",
    "    if ta.pars[0] == 0:\n",
    "        ta.pars[0] = 1\n",
    "    else:\n",
    "        ta.pars[0] = 0\n",
    "\n",
    "    # Append the event time to zero_vel_times.\n",
    "    zero_vel_times.append(ta.time)\n",
    "\n",
    "    # Do not stop the integration.\n",
    "    return True\n",
    "\n",
    "# Define a terminal event that turns air drag on/off\n",
    "# whenever the velocity goes to zero.\n",
    "t_ev = hy.t_event(\n",
    "        # The event equation.\n",
    "        v,\n",
    "        # The callback.\n",
    "        callback = t_cb)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb7c460f",
   "metadata": {},
   "source": [
    "Like in the case of non-terminal events, we specified as first construction argument\n",
    "the event equation. As second argument we passed a callback function that will be invoked\n",
    "when the event triggers.\n",
    "\n",
    "As you can see from the code snippet, the callback signature for terminal events\n",
    "differs from the signature non-terminal callbacks. Specifically:\n",
    "\n",
    "- the event trigger time is not passed to the callback. This is not necessary\n",
    "  because, when a terminal event triggers, the state of the integrator is propagated\n",
    "  up to the event, and thus the trigger time is the current integrator time\n",
    "  (which can be fetched via ``ta.time``);\n",
    "- there is an additional boolean function argument, here called ``mr``. We will be ignoring\n",
    "  this extra argument for the moment, its meaning will be clarified in the\n",
    "  cooldown section below;\n",
    "- whereas non-terminal event callbacks do not return anything, terminal event callbacks\n",
    "  are required to return ``True`` or ``False``. If the callback returns ``False`` the integration\n",
    "  will always be stopped after the execution of the callback. Otherwise, when using the\n",
    "  ``propagate_*()`` family of functions, the integration will resume after the execution\n",
    "  of the callback.\n",
    "\n",
    "Note that, for the purpose of stopping the integration, an event *without* a callback is considered\n",
    "equivalent to an event whose callback returns ``False``.\n",
    "We thus refer to terminal events without a callback or whose callback returns ``False``\n",
    "as *stopping* terminal events, because their occurrence will prevent the integrator from continuing\n",
    "without user intervention.\n",
    "\n",
    "Like for non-terminal events, the last callback argument is the sign of the time derivative\n",
    "of the event equation at the event trigger time.\n",
    "\n",
    "In this example, within the callback code we alter the value of the drag coefficient $\\alpha$\n",
    "(which is stored within the runtime parameters of the integrator): if $\\alpha$\n",
    "is currently 0, we set it to 1, otherwise we set it to 0.\n",
    "\n",
    "Let us proceed to the construction of the integrator:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "9aa86e4a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Construct the damped pendulum integrator.\n",
    "ta = hy.taylor_adaptive([(x, v),\n",
    "                        # NOTE: alpha is represented as\n",
    "                        # the first (and only) runtime\n",
    "                        # parameter: par[0].\n",
    "                        (v, -9.8 * hy.sin(x) - hy.par[0] * v)],\n",
    "                        [0.05, 0.025],\n",
    "                        # The list of terminal events.\n",
    "                        t_events = [t_ev])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "52552430",
   "metadata": {},
   "source": [
    "Similarly to the non-terminal events case, the list of terminal events\n",
    "is specified when constructing an integrator via the ``t_events`` keyword argument.\n",
    "\n",
    "If a terminal event triggers within the single-step functions (``step()`` and ``step_backward()``),\n",
    "the outcome of the integration will contain the index of the event that triggered. Let us see a simple example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "f90d1825",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Event index: 0\n"
     ]
    }
   ],
   "source": [
    "# Propagate step-by-step until the event triggers.\n",
    "oc, h = ta.step()\n",
    "while oc == hy.taylor_outcome.success:\n",
    "    oc, h = ta.step()\n",
    "\n",
    "# Print the outcome to screen.\n",
    "print(\"Event index: {}\".format(int(oc)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "59ef83e2",
   "metadata": {},
   "source": [
    "The screen output confirms that the first (and only) event triggered. For stopping terminal events,\n",
    "the numerical value of the outcome is the opposite of the event index minus one.\n",
    "\n",
    "Because here we used the single step\n",
    "function, even if the event's callback returned ``True`` the integration was stopped in correspondence of the\n",
    "event. Let us now use the ``propagate_grid()`` function instead, so that the integration resumes after the\n",
    "execution of the callback:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "2b6d0469",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Final time: 10.0\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Construct a time grid from the current time to t=10.\n",
    "t_grid = np.linspace(ta.time, 10, 1000)\n",
    "\n",
    "# Propagate over the time grid.\n",
    "x_hist = ta.propagate_grid(t_grid)[4][:,0]\n",
    "\n",
    "# Display the time evolution for the x variable.\n",
    "plt.plot(t_grid, x_hist)\n",
    "plt.xlabel(\"Time\")\n",
    "plt.ylabel(\"x\")\n",
    "\n",
    "# Put vertical lines in correspondence of\n",
    "# the detected events.\n",
    "for ev_time in zero_vel_times:\n",
    "    plt.axvline(x = ev_time, linestyle='--', color='gray')\n",
    "\n",
    "print(\"Final time: {}\".format(ta.time))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "49c4ea5a",
   "metadata": {},
   "source": [
    "The screen output confirms that indeed the integration continued up to the final time $t = 10$.\n",
    "\n",
    "The plot shows how the event correctly triggered at $v=0$ and how, in the time intervals in which $\\alpha = 1$, the motion of the pendulum was damped by the air drag.\n",
    "\n",
    "### Cooldown\n",
    "\n",
    "One notable complication when restarting an integration that was stopped in correspondence of a terminal event\n",
    "is the risk of immediately re-triggering the same event, which would lead to an endless loop without any progress\n",
    "being made in the integration.\n",
    "\n",
    "In order to avoid this issue, whenever a terminal event occurs the event enters\n",
    "a *cooldown* period. Within the cooldown period, occurrences of the same event are ignored by the event detection\n",
    "system.\n",
    "\n",
    "The length of the cooldown period is, by default, automatically deduced by heyoka.py, following a heuristic\n",
    "that takes into account:\n",
    "\n",
    "* the error tolerance of the integrator,\n",
    "* the derivative of the event equation at the trigger time.\n",
    "\n",
    "The heuristic works best under the assumption that the event equation does not change (much) after the\n",
    "execution of the event's callback. If, for any reason, the automatic deduction heuristic is\n",
    "to be avoided, it is possible to set a custom value for the cooldown.\n",
    "A custom cooldown period can be selected when constructing\n",
    "a terminal event via the ``cooldown`` keyword argument.\n",
    "\n",
    "When a terminal event triggers and enters the cooldown period, the event detection system will also try to detect\n",
    "the occurrence of multiple roots of the event equation within the cooldown period. If such multiple roots are detected,\n",
    "then the ``mr`` boolean parameter in the terminal event callback will be set to ``True``, so that the user\n",
    "has the possibility to handle such occurrence. Note that an ``mr`` value of ``False`` in the callback does not imply\n",
    "that multiple roots do not exist, just that they were not detected.\n",
    "\n",
    "Note that manually modifying the integrator's time or state does **not** automatically reset the cooldown values\n",
    "for terminal events. This could in principle lead to missing terminal events when the integration restarts.\n",
    "For this reason, a method called ``reset_cooldowns()`` is available to clear the cooldown timers of\n",
    "all terminal events.\n",
    "\n",
    "## Limitations and caveats\n",
    "\n",
    "### Badly-conditioned event equations\n",
    "\n",
    "Because heyoka.py's event detection system is based on polynomial root finding techniques, it will experience\n",
    "issues when the Taylor series of the event equations have roots of multiplicity greater than 1. This is usually\n",
    "not a problem in practice, unless the event equations are written in such a way to always generate polynomials\n",
    "with multiple roots.\n",
    "\n",
    "For instance, an event equation such as\n",
    "\n",
    "$$\n",
    "\\left[ g\\left( t, \\boldsymbol{x} \\left( t \\right) \\right) \\right]^2 = 0\n",
    "$$\n",
    "\n",
    "will be troublesome, because both the event equation *and* its time derivative will be zero\n",
    "when the event triggers. This will translate to a Taylor series with a double root in correspondence\n",
    "of the event trigger time, which will lead to a breakdown of the root finding algorithm.\n",
    "This, at best, will result in reduced performance and, at worst, in missing events altogether.\n",
    "Additionally, in case of terminal events the automatically-deduced cooldown value in correspondence of\n",
    "a double root will tend to infinity.\n",
    "\n",
    "As a general rule, users should then avoid defining event equations in which the event trigger times\n",
    "are stationary points.\n",
    "\n",
    "Note that missed events due to badly-conditioned polynomials will likely be flagged by heyoka's logging system.\n",
    "\n",
    "### Event equations and timestepping\n",
    "\n",
    "As explained earlier, the differential equations of the events are added to the ODE system and\n",
    "integrated together with the original equations. Because of this, event equations influence the\n",
    "selection of the adaptive timestep, even if no event is ever detected throughout the integration.\n",
    "\n",
    "For instance, the absolute value of the event equation at the beginning of the timestep is taken\n",
    "into account for the determination of the timestep size in relative error control mode. Thus, if\n",
    "the typical magnitude of the event equation throughout the integration is much larger than the typical\n",
    "magnitude of the state variables, the integration error for the state variables will increase with respect\n",
    "to an integration without event detection.\n",
    "\n",
    "As another example, an event equation which requires small timesteps for accurate numerical propagation\n",
    "(e.g., a highly-stiff equation) will inevitably slow down also the propagation of the ODEs."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
