{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "0df37c9b-35ed-4cff-8c17-bfecbebdfc47",
   "metadata": {},
   "source": [
    "Computations in extended precision\n",
    "==================================\n",
    "\n",
    "As hinted in the [expression system tutorial](<./The expression system.ipynb>), heyoka.py supports computations not only in double precision, but also in extended precision. Specifically, heyoka.py currently supports:\n",
    "\n",
    "- the 80-bit IEEE [extended-precision format](https://en.wikipedia.org/wiki/Extended_precision) (~21 decimal digits),\n",
    "- the 128-bit IEEE [quadruple-precision format](https://en.wikipedia.org/wiki/Quadruple-precision_floating-point_format) (~36 decimal digits).\n",
    "\n",
    "How these extended precision floating-point types can be accessed and used from Python varies depending on the platform. In particular:\n",
    "\n",
    "- if you are using an Intel x86 processor and your C/C++ compiler implements ``long double`` as the 80-bit IEEE extended-precision format, then the 80-bit IEEE floating-point type is available as the NumPy [``longdouble``](https://numpy.org/doc/stable/reference/arrays.scalars.html#numpy.longdouble) type;\n",
    "- if you are on a platform with support for the non-standard ``__float128`` type, then the 128-bit IEEE floating-point type is available as the ``heyoka.real128`` type;\n",
    "- if you are on a platform where the C/C++ ``long double`` type is implemented as a quadruple-precision IEEE floating-point type (e.g., 64-bit ARM), then the 128-bit IEEE floating-point type is available as the NumPy [``longdouble``](https://numpy.org/doc/stable/reference/arrays.scalars.html#numpy.longdouble) type.\n",
    "\n",
    "In other words, extended precision computations in heyoka.py are supported via the NumPy [``longdouble``](https://numpy.org/doc/stable/reference/arrays.scalars.html#numpy.longdouble) type (which could be either an 80-bit or 128-bit floating-point type, depending on the platform) and the ``heyoka.real128`` type (which will always be a 128-bit floating-point type, if available).\n",
    "\n",
    "Extended-precision (80-bit) example\n",
    "-----------------------------------\n",
    "\n",
    "For this first example, we will be assuming that ``numpy.longdouble`` implements the 80-bit extended-precision floating-point format. In order to verify that heyoka.py indeed is able to work in extended precision, we will be monitoring the evolution of the energy constant in a high-precision numerical integration of the simple pendulum.\n",
    "\n",
    "Let us begin as usual with the definition of the dynamical equations:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "fe2b2c0e-30c7-41c1-9fb0-6b411633ac04",
   "metadata": {},
   "outputs": [],
   "source": [
    "import heyoka as hy\n",
    "\n",
    "# Create the symbolic variables x and v.\n",
    "x, v = hy.make_vars(\"x\", \"v\")\n",
    "\n",
    "# Define the dynamical equations.\n",
    "sys = [(x, v), (v, -9.8 * hy.sin(x))]\n",
    "\n",
    "# Define a small helper to compute the energy\n",
    "# from the state vector.\n",
    "def compute_energy(sv):\n",
    "    from numpy import cos\n",
    "    return (sv[1]*sv[1])/2 + 9.8*(1 - cos(sv[0]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a231646-1eb7-4dff-8794-fbd62809b507",
   "metadata": {},
   "source": [
    "Next, we are going to create an integrator object in extended precision:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2fe95775-6665-4d37-8a8a-a291b181f306",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "ta = hy.taylor_adaptive(sys,\n",
    "                        # Initial conditions in extended precision.\n",
    "                        np.array([-1, 0], dtype=np.longdouble),\n",
    "                        # Tolerance - also in extended precision.\n",
    "                        tol=np.longdouble(1e-20),\n",
    "                        # Specify that the integrator must operate\n",
    "                        # in extended precision.\n",
    "                        fp_type=np.longdouble)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd4dd640-3549-4867-9542-d0a7f9a28b4d",
   "metadata": {},
   "source": [
    "In order to enable extended precision, we passed the ``fp_type=np.longdouble`` argument to the constructor, and we made sure that both the initial state vector ``[0.05, 0.025]`` and the tolerance value ``1e-20`` are specified in extended precision.\n",
    "\n",
    "Next, we compute and store the initial energy of the system for later use:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "26198fa4-e5b7-48d7-9bd7-0db89c1ad7c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Compute the initial energy of the system.\n",
    "orig_E = compute_energy(ta.state)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "982f68de-101e-49af-a1df-6d031ab19001",
   "metadata": {},
   "source": [
    "We proceed now with a numerical integration over a time grid, up to $t=300$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d827e5fd-a2ee-4b3a-8b48-544d8fb01241",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a time grid in extended precision.\n",
    "t_grid = np.linspace(0, 300, 100, dtype=np.longdouble)\n",
    "out = ta.propagate_grid(t_grid)[-1]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b0e90025-2c7e-4f32-a7ea-a43e3ed56625",
   "metadata": {},
   "source": [
    "Note how the time grid was also created in extended precision.\n",
    "\n",
    "We can now proceed with the computation and the visualisation of the energy error:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "67266731-0ad8-4a27-b1e7-5e758f6719d2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Compute the relative energy error over the time grid.\n",
    "E_err = abs((orig_E - compute_energy(out.transpose())) / orig_E)\n",
    "\n",
    "# Plot the energy error.\n",
    "from matplotlib.pylab import plt\n",
    "fig = plt.figure(figsize=(8, 6))\n",
    "plt.semilogy(t_grid, E_err)\n",
    "plt.xlabel(\"Time\")\n",
    "plt.ylabel(\"Rel. energy error\");"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43d3b75a-4ca1-4dc3-bbe4-ac55eff75cba",
   "metadata": {},
   "source": [
    "We can see indeed how the energy error is kept at around the epsilon of the extended-precision floating-point type ($\\sim 10^{-19}$).\n",
    "\n",
    "Quadruple-precision (128-bit) example\n",
    "-------------------------------------\n",
    "\n",
    "Switching to quadruple precision is just a matter of replacing ``np.longdouble`` with ``heyoka.real128``:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a6ed179e-e8a7-47e0-8304-52423809fa21",
   "metadata": {},
   "outputs": [],
   "source": [
    "ta = hy.taylor_adaptive(sys,\n",
    "                        # Initial conditions in quadruple precision.\n",
    "                        np.array([-1, 0], dtype=hy.real128),\n",
    "                        # Tolerance - also in quadruple precision.\n",
    "                        tol=hy.real128(1e-35),\n",
    "                        # Specify that the integrator must operate\n",
    "                        # in quadruple precision.\n",
    "                        fp_type=hy.real128)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cf69c728-6ef1-4e0f-bafe-27bc54d3e271",
   "metadata": {},
   "source": [
    "``heyoka.real128`` is a Python wrapper for the [``real128``](https://bluescarni.github.io/mppp/real128.html) C++ class from the mp++ library. In addition to being available as a scalar type, ``heyoka.real128`` can also be used as a ``dtype`` in NumPy, so that it is possible to create and manipulate NumPy arrays of ``heyoka.real128`` instances.\n",
    "\n",
    "Like in the previous example, we can now proceed to monitor the energy conservation for the pendulum system:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0f894adf-a092-46ce-9ca2-8ebc9ed6dbc6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Compute the initial energy of the system.\n",
    "orig_E = compute_energy(ta.state)\n",
    "\n",
    "# Create a time grid in quadruple precision.\n",
    "t_grid = np.linspace(0, 300, 100, dtype=hy.real128)\n",
    "out = ta.propagate_grid(t_grid)[-1]\n",
    "\n",
    "# Compute the relative energy error over the time grid.\n",
    "E_err = abs((orig_E - compute_energy(out.transpose())) / orig_E)\n",
    "\n",
    "# Plot the energy error.\n",
    "from matplotlib.pylab import plt\n",
    "fig = plt.figure(figsize=(8, 6))\n",
    "plt.semilogy(t_grid, E_err)\n",
    "plt.xlabel(\"Time\")\n",
    "plt.ylabel(\"Rel. energy error\");"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a2031fa2-3fcf-4f39-b89f-7975181fe5a6",
   "metadata": {},
   "source": [
    "We can see indeed how the energy error is kept at around the epsilon of the quadruple-precision floating-point type.\n",
    "\n",
    "Other classes and functions\n",
    "---------------------------\n",
    "\n",
    "Besides the adaptive integrator, several other classes and functions in heyoka.py can be used in extended precision. The [event classes](<./Event detection.ipynb>), for instance, can be constructed in extended precision:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "7abed49e-eeb9-4df3-8cf2-bbdd35da9982",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Construct a terminal event in extended precision.\n",
    "ev = hy.t_event(x, fp_type=np.longdouble, cooldown=np.longdouble(1e-8))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d7b5003-096a-4e84-be6f-d1e9b180d5fb",
   "metadata": {},
   "source": [
    "As with the adaptive integrator, in order to enable extended precision we must pass the ``fp_type`` keyword argument, and any numerical quantity passed to the constructor (such as the cooldown in this specific case) must also be created in extended precision.\n",
    "\n",
    "Note that the precision of an event must match the precision of the integrator object in which the event is used, otherwise a runtime error will be raised during the construction of the integrator.\n",
    "\n",
    "Caveats, limitations & issues\n",
    "-----------------------------\n",
    "\n",
    "### Initialising numbers in extended precision\n",
    "\n",
    "A typical pitfall when working with extended precision numbers involves their initialisation. For instance, if you want to initialise a quadruple-precision approximation of the number $1.1$, you may be tempted to write:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "233be55b-d3ac-4d1f-b66e-5b296beaed7c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.10000000000000008881784197001252323"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hy.real128(1.1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dc7a7b58-211c-4b9b-822b-8b989d9cdb3c",
   "metadata": {},
   "source": [
    "As you can see however, doing so does not produce the best possible quadruple-precision approximation of $1.1$. The issue here is that the Python literal ``1.1`` is first interpreted as a double-precision value, and then widened to quadruple-precision in the conversion to ``hy.real128``.\n",
    "\n",
    "The issue can be solved by initialising from string:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "32fc0f70-537f-4fd7-ad06-fd90a09f8332",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.10000000000000000000000000000000008"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hy.real128(\"1.1\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f2615fcc-a2c3-44bb-a896-df082ebc08f1",
   "metadata": {},
   "source": [
    "Similarly, if you need to construct an extended precision value from a fraction, it is better to construct the numerator and denominator separately, and then compute the quotient:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "474499be-4e20-4d95-87f9-d43383f941c1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.299999999999999988897769753748434596"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Don't do this!\n",
    "hy.real128(3./10.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "8c49a476-239a-4cb2-a7a1-6592b665b624",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.29999999999999999999999999999999999"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Do this instead,\n",
    "hy.real128(3) / hy.real128(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "73f78f34-e1c0-4267-92b0-8f84771c91e9",
   "metadata": {},
   "source": [
    "### NumPy issues and limitations\n",
    "\n",
    "Although it is possible to construct NumPy arrays in extended precision and to perform basic operations on them, there are limitations to what one can do with extended precision arrays.\n",
    "\n",
    "To begin with, many NumPy facilities are not available at all in extended precision (e.g., random number generation, nontrivial linear algebra, etc.). In addition, there seem to be several small issues involving NumPy's casting and conversion primitives when using the ``heyoka.real128`` type, which typically result in runtime exceptions. It is unclear at this time whether these are genuine NumPy bugs or issues in the ``heyoka.real128`` wrapping code.\n",
    "\n",
    "Despite these limitations, basic uses of extended precision arrays (such as slicing, indexing, arithmetic, special functions and explicit conversions to/from other types) are supported and working as intended."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
